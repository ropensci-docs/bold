[{"path":[]},{"path":"https://docs.ropensci.org/bold/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page","code":""},{"path":"https://docs.ropensci.org/bold/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/bold.git Make sure track progress upstream (.e., version bold ropensci/bold) git remote add upstream https://github.com/ropensci/bold.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Push account Submit pull request home base ropensci/bold","code":""},{"path":[]},{"path":"https://docs.ropensci.org/bold/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 bold authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/bold/articles/bold.html","id":"bold-info","dir":"Articles","previous_headings":"","what":"bold info","title":"bold introduction","text":"BOLD home page: https://boldsystems.org/ BOLD API docs: https://v4.boldsystems.org/index.php/api_home See also taxize book options taxonomic workflows BOLD: https://taxize.dev/","code":""},{"path":"https://docs.ropensci.org/bold/articles/bold.html","id":"using-bold","dir":"Articles","previous_headings":"","what":"Using bold","title":"bold introduction","text":"Install Install bold CRAN install development version GitHub Load package","code":"install.packages(\"bold\") remotes::install_github(\"ropensci/bold\") library(\"bold\")"},{"path":"https://docs.ropensci.org/bold/articles/bold.html","id":"search-for-taxonomic-names-via-names","dir":"Articles","previous_headings":"","what":"Search for taxonomic names via names","title":"bold introduction","text":"bold_tax_name searches names names.","code":"bold_tax_name(name = 'Diplura') #>    taxid   taxon tax_rank tax_division parentid       parentname #> 1 603673 Diplura    genus     Protista    53974 Scytosiphonaceae #> 2 734358 Diplura    class     Animalia       20       Arthropoda #>   specimenrecords taxonrep     representitive_image.image #> 1               6     <NA>                           <NA> #> 2             308  Diplura BSOIL/GBOL20120+1540220834.jpg #>   representitive_image.apectratio   input #> 1                              NA Diplura #> 2                           0.841 Diplura bold_tax_name(name = c('Diplura', 'Osmia')) #>    taxid   taxon tax_rank tax_division parentid       parentname #> 1 603673 Diplura    genus     Protista    53974 Scytosiphonaceae #> 2 734358 Diplura    class     Animalia       20       Arthropoda #> 3   4940   Osmia    genus     Animalia     4962     Megachilinae #>   specimenrecords taxonrep     representitive_image.image #> 1               6     <NA>                           <NA> #> 2             308  Diplura BSOIL/GBOL20120+1540220834.jpg #> 3            3007    Osmia              BUSA/IMG_3061.jpg #>   representitive_image.apectratio   input #> 1                              NA Diplura #> 2                           0.841 Diplura #> 3                           1.486   Osmia"},{"path":"https://docs.ropensci.org/bold/articles/bold.html","id":"search-for-taxonomic-names-via-bold-identifiers","dir":"Articles","previous_headings":"","what":"Search for taxonomic names via BOLD identifiers","title":"bold introduction","text":"bold_tax_id searches names BOLD identifiers.","code":"bold_tax_id(id = 88899) #>   input taxid   taxon tax_rank tax_division parentid parentname #> 1 88899 88899 Momotus    genus     Animalia    88898  Momotidae bold_tax_id(id = c(88899, 125295)) #>    input  taxid      taxon tax_rank tax_division parentid  parentname #> 1  88899  88899    Momotus    genus     Animalia    88898   Momotidae #> 2 125295 125295 Helianthus    genus      Plantae   151101 Asteroideae #>     taxonrep #> 1       <NA> #> 2 Helianthus"},{"path":"https://docs.ropensci.org/bold/articles/bold.html","id":"search-for-sequence-data-only","dir":"Articles","previous_headings":"","what":"Search for sequence data only","title":"bold introduction","text":"BOLD sequence API gives back sequence data, bit metadata. default get list back can optionally get back crul response object can geographic searches can search researcher name taxon IDs container (containers include project codes dataset codes) bin (bin Barcode Index Number) ways query, check docs ?bold_seq.","code":"bold_seq(taxon = 'Coelioxys')[1:2] #> [[1]] #> [[1]]$id #> [1] \"ABEE117-17\" #>  #> [[1]]$name #> [1] \"Coelioxys elongata\" #>  #> [[1]]$gene #> [1] \"ABEE117-17\" #>  #> [[1]]$sequence #> [1] \"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------TTATCATTATATACATATCATCCTTCCCCATCAGTTGATTTAGCAATTTTTTYTTTACATTTATCAGGAATTTYTTYTATTATCGGATCAATAAATTTTATTGTAACAATTTTAATAATAAAAAATTATTCAATAAATTATAATCAAATACCTTTATTTCCATGATCAATTTTAATTACTACAATTTTATTATTATTATCATTACCTGTATTAGCAGGAGCTATTACAATATTATTATTTGATCGTAATTTAAATTCATCATTTTTTGACCCAATAGGAGGAGGAGATCCTATTTTATATCAACATTTATTTTG------------------------------------\" #>  #>  #> [[2]] #> [[2]]$id #> [1] \"ABEE193-17\" #>  #> [[2]]$name #> [1] \"Coelioxys rufescens\" #>  #> [[2]]$gene #> [1] \"ABEE193-17\" #>  #> [[2]]$sequence #> [1] \"---------------------------------------------------------------------------------------------------------------------------------------------AATAATGATATAATTTATAACTCTTTTATTACAGCTCATGCATTTTTAATAATTTTTTTTTTAGTTATACCTTTTTTAATTGGAGGATTTGGAAATTGATTAGCTCCTTTAATATTAGGAGCTCCAGATATAGCATTCCCTCGAATAAATAATATTAGATTTTGATTATTACCTCCTTCTTTATTAATATTATTAACTAGTAATTTAATTAATCCTAGACCAGGAACAGGATGAACAATTTATCCTCCTTTATCTTTATATAATTATCATCCTTCACCATCAGTAGATTTAGCAATTTTTTCTTTACATTTATCAGGAGTATCATCTATTATTGGTTCAATAAATTTTATTGTAACAATTTTATTAATAAAAAATTATTCAATAAATTATAATCAAATACCTTTATTCCCAKGATCAATTTTAATCACTACAATTTTATTATTATTATCTTTGCCTGTTTTAGCAGGAGCAATTACAATATTATTATTTGATCGAAATCTAAATTCATCCTTTTTTGACCCTTTAGGAGGAGGGGATCCAATTTTATACCAACATTTATTTTGATTTTTTGGACATCC---------------------\" res <- bold_seq(taxon = 'Coelioxys', response = TRUE) res$response_headers #> $status #> [1] \"HTTP/2 200 \" #>  #> $server #> [1] \"nginx\" #>  #> $date #> [1] \"Mon, 20 Apr 2020 16:23:04 GMT\" #>  #> $`content-type` #> [1] \"application/x-download\" #>  #> $`x-powered-by` #> [1] \"PHP/5.3.15\" #>  #> $`content-disposition` #> [1] \"attachment; filename=fasta.fas\" #>  #> $`x-frame-options` #> [1] \"SAMEORIGIN\" #>  #> $`x-content-type-options` #> [1] \"nosniff\" #>  #> $`x-xss-protection` #> [1] \"1; mode=block\" bold_seq(geo = \"USA\") #> [[1]] #> [[1]]$id #> [1] \"GBAN1777-08\" #>  #> [[1]]$name #> [1] \"Macrobdella decora\" #>  #> [[1]]$gene #> [1] \"GBAN1777-08\" #>  #> [[1]]$sequence #> [1] \"---------------------------------ATTGGAATCTTGTATTTCTTATTAGGTACATGATCTGCTATAGTAGGGACCTCTATA---AGAATAATTATTCGAATTGAATTAGCTCAACCTGGGTCGTTTTTAGGAAAT---GATCAAATTTACAATACTATTGTTACTGCTCATGGATTAATTATAATTTTTTTTATAGTAATACCTATTTTAATTGGAGGGTTTGGTAATTGATTAATTCCGCTAATA---ATTGGTTCTCCTGATATAGCTTTTCCACGTCTTAATAATTTAAGATTTTGATTACTTCCGCCATCTTTAACTATACTTTTTTGTTCATCTATAGTCGAAAATGGAGTAGGTACTGGATGGACTATTTACCCTCCTTTAGCAGATAACATTGCTCATTCTGGACCTTCTGTAGATATA---GCAATTTTTTCACTTCATTTAGCTGGTGCTTCTTCTATTTTAGGTTCATTAAATTTTATTACTACTGTAGTTAATATACGATGACCAGGGATATCTATAGAGCGAATTCCTTTATTTATTTGATCCGTAATTATTACTACTGTATTGCTATTATTATCTTTACCAGTATTAGCAGCT---GCTATTTCAATATTATTAACAGATCGTAACTTAAATACTAGATTTTTTGACCCAATAGGAGGAGGGGATCCTATTTTATTCCAACATTTATTTTGATTTTTTGGCCACCCTGAAGTTTATATTTTAATTTTACCAGGATTTGGAGCTATTTCTCATGTAGTAAGTCATAACTCT---AAAAAATTAGAACCGTTTGGATCATTAGGGATATTATATGCAATAATTGGAATTGCAATTTTAGGTTTTATTGTTTGAGCACATCATATATTTACAGTAGGTCTTGATGTAGATACACGAGCTTATTTTACAGCAGCTACAATAGTTATTGCTGTTCCTACAGGAATTAAAGTATTTAGGTGATTG---GCAACT\" #>  #>  #> [[2]] #> [[2]]$id #> [1] \"GBAN1780-08\" #>  #> [[2]]$name #> [1] \"Haemopis terrestris\" #>  #> [[2]]$gene #> [1] \"GBAN1780-08\" #>  #> [[2]]$sequence #> [1] \"---------------------------------ATTGGAACWTTWTATTTTATTTTNGGNGCTTGATCTGCTATATTNGGGATCTCAATA---AGGAATATTATTCGAATTGAGCCATCTCAACCTGGGAGATTATTAGGAAAT---GATCAATTATATAATTCATTAGTAACAGCTCATGGATTAATTATAATTTTCTTTATGGTTATGCCTATTTTGATTGGTGGGTTTGGTAATTGATTACTACCTTTAATA---ATTGGAGCCCCTGATATAGCTTTTCCTCGATTAAATAATTTAAGTTTTTGATTATTACCACCTTCATTAATTATATTGTTAAGATCCTCTATTATTGAAAGAGGGGTAGGTACAGGTTGAACCTTATATCCTCCTTTAGCAGATAGATTATTTCATTCAGGTCCATCGGTAGATATA---GCTATTTTTTCATTACATATAGCTGGAGCATCATCTATTTTAGGCTCATTAAACTTTATTTCTACAATTATTAATATACGAATTAAAGGTATAAGATCTGATCGAGTACCTTTATTTGTATGATCAGTTGTTATTACAACAGTTCTGTTATTATTGTCTTTACCTGTTTTAGCTGCA---GCTATTACTATATTATTAACAGATCGTAATTTAAATACTACTTTTTTTGATCCTATAGGAGGTGGAGATCCAGTATTGTTTCAACACTTATTTTGATTTTTTGGTCATCCAGAAGTATATATTTTGATTTTACCAGGATTTGGAGCAATTTCTCATATTATTACAAATAATTCT---AAAAAATTGGAACCTTTTGGATCTCTTGGTATAATTTATGCTATAATTGGAATTGCAGTTTTAGGGTTTATTGTATGAGCCCATCATATATTTACTGTAGGATTAGATGTTGATACTCGAGCTTATTTTACAGCAGCTACTATAGTTATTGCTGTTCCTACTGGTATTAAAGTTTTTAGGTGATTA---GCAACA\" #>  #>  #> [[3]] #> [[3]]$id #> [1] \"GBNM0293-06\" #>  #> [[3]]$name #> [1] \"Steinernema carpocapsae\" #>  #> [[3]]$gene #> [1] \"GBNM0293-06\" #>  #> [[3]]$sequence #> [1] \"---------------------------------------------------------------------------------ACAAGATTATCTCTTATTATTCGTTTAGAGTTGGCTCAACCTGGTCTTCTTTTGGGTAAT---GGTCAATTATATAATTCTATTATTACTGCTCATGCTATTCTTATAATTTTTTTCATAGTTATACCTAGAATAATTGGTGGTTTTGGTAATTGAATATTACCTTTAATATTGGGGGCTCCTGATATAAGTTTTCCACGTTTGAATAATTTAAGTTTTTGATTGCTACCAACTGCTATATTTTTGATTTTAGATTCTTGTTTTGTTGACACTGGTTGTGGTACTAGTTGAACTGTTTATCCTCCTTTGAGG---ACTTTAGGTCACCCTGGYAGAAGTGTAGATTTAGCTATTTTTAGTCTTCATTGTGCAGGAATTAGCTCAATTTTAGGGGCTATTAATTTTATATGTACTACAAAAAATCTTCGTAGTAGTTCTATTTCTTTGGAACATATAAGACTTTTTGTTTGGGCTGTTTTTGTTACTGTTTTTTTATTAGTTTTATCTTTACCTGTTTTAGCTGGTGCTATTACTATGCTTTTAACAGACCGTAATTTAAATACTTCTTTTTTT------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\" #>  #>  #> [[4]] #> [[4]]$id #> [1] \"NEONV108-11\" #>  #> [[4]]$name #> [1] \"Aedes thelcter\" #>  #> [[4]]$gene #> [1] \"NEONV108-11\" #>  #> [[4]]$sequence #> [1] \"AACTTTATACTTCATCTTCGGAGTTTGATCAGGAATAGTTGGTACATCATTAAGAATTTTAATTCGTGCTGAATTAAGTCAACCAGGTATATTTATTGGAAATGACCAAATTTATAATGTAATTGTTACAGCTCATGCTTTTATTATAATTTTCTTTATAGTTATACCTATTATAATTGGAGGATTTGGAAATTGACTAGTTCCTCTAATATTAGGAGCCCCAGATATAGCTTTCCCTCGAATAAATAATATAAGTTTTTGAATACTACCTCCCTCATTAACTCTTCTACTTTCAAGTAGTATAGTAGAAAATGGATCAGGAACAGGATGAACAGTTTATCCACCTCTTTCATCTGGAACTGCTCATGCAGGAGCCTCTGTTGATTTAACTATTTTTTCTCTTCATTTAGCCGGAGTTTCATCAATTTTAGGGGCTGTAAATTTTATTACTACTGTAATTAATATACGATCTGCAGGAATTACTCTTGATCGACTACCTTTATTCGTTTGATCTGTAGTAATTACAGCTGTTTTATTACTTCTTTCACTTCCTGTATTAGCTGGAGCTATTACAATACTATTAACTGATCGAAATTTAAATACATCTTTCTTTGATCCAATTGGAGGAGGAGACCCAATTTTATACCAACATTTATTT\" #>  #>  #> [[5]] #> [[5]]$id #> [1] \"NEONV109-11\" #>  #> [[5]]$name #> [1] \"Aedes thelcter\" #>  #> [[5]]$gene #> [1] \"NEONV109-11\" #>  #> [[5]]$sequence #> [1] \"AACTTTATACTTCATCTTCGGAGTTTGATCAGGAATAGTTGGTACATCATTAAGAATTTTAATTCGTGCTGAATTAAGTCAACCAGGTATATTTATTGGAAATGACCAAATTTATAATGTAATTGTTACAGCTCATGCTTTTATTATAATTTTCTTTATAGTTATACCTATTATAATTGGAGGATTTGGAAATTGACTAGTTCCTCTAATATTAGGAGCCCCAGATATAGCTTTCCCTCGAATAAATAATATAAGTTTTTGAATACTACCTCCCTCATTAACTCTTCTACTTTCAAGTAGTATAGTAGAAAATGGGTCAGGAACAGGATGAACAGTTTATCCACCTCTTTCATCTGGAACTGCTCATGCAGGAGCCTCTGTTGATTTAACTATTTTTTCTCTTCATTTAGCCGGAGTTTCATCAATTTTAGGGGCTGTAAATTTTATTACTACTGTAATTAATATACGATCTGCAGGAATTACTCTTGATCGACTACCTTTATTCGTTTGATCTGTAGTAATTACAGCTGTTTTATTACTTCTTTCACTTCCTGTATTAGCTGGAGCTATTACAATACTATTAACTGATCGAAATTTAAATACATCTTTCTTTGACCCAATTGGAGGGGGAGACCCAATTTTATACCAACATTTATTT\" bold_seq(researchers = 'Thibaud Decaens')[[1]] #> $id #> [1] \"COLNO015-09\" #>  #> $name #> [1] \"Ptiliidae\" #>  #> $gene #> [1] \"COLNO015-09\" #>  #> $sequence #> [1] \"AACCTTGTATTTTATGTTCGGNGCTTGAGCTGGAATAGTCGGGACAAGTTTGAGTCTCCTTATCCGAACTGAACTCGGCACTCCAGGTTCACTAATTGGAGACGACCAAATCTACAACGTAATCGTAACAGCTCATGCTTTTGTGATGATTTTTTTTATGGTCATGCCGATTTTAATCGGAGGTTTCGGAAACTGACTTGTTCCCTTGATACTTGGAGCCCCTGATATAGCTTTCCCTCGAATGAACAACATAAGGTTCTGGCTCCTCCCCCCTTCTCTGACCCTACTTTTAATGAGAAGGATAGTAGAAAGCGGAGCAGGAACAGGGTGAACAGTTTATCCTCCCCTAGCTTCAAATATTGCTCATGGTGGAGCATCAGTTGATTTGGCGATTTTTAGGCTCCATTTAGCTGGAATCTCTTCCATTCTAGGAGCCGTAAATTTCATCACAACAATTCTCAACATACGAACTCCTCAAATAAGGTTTGATCAAATGCCATTGTTTGTTTGGGCTGTTGGAATTACAGCTCTCCTTCTTCTTCTTTCACTTCCNGTTTTAGCCGGAGCTATCACAATATTGCTAAC-------------------------------------------------------------------------\" bold_seq(ids = c('ACRJP618-11', 'ACRJP619-11')) #> [[1]] #> [[1]]$id #> [1] \"ACRJP618-11\" #>  #> [[1]]$name #> [1] \"Lepidoptera\" #>  #> [[1]]$gene #> [1] \"ACRJP618-11\" #>  #> [[1]]$sequence #> [1] \"------------------------TTGAGCAGGCATAGTAGGAACTTCTCTTAGTCTTATTATTCGAACAGAATTAGGAAATCCAGGATTTTTAATTGGAGATGATCAAATCTACAATACTATTGTTACGGCTCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGGAGGATTTGGTAATTGATTAGTTCCCCTTATACTAGGAGCCCCAGATATAGCTTTCCCTCGAATAAACAATATAAGTTTTTGGCTTCTTCCCCCTTCACTATTACTTTTAATTTCCAGAAGAATTGTTGAAAATGGAGCTGGAACTGGATGAACAGTTTATCCCCCACTGTCATCTAATATTGCCCATAGAGGTACATCAGTAGATTTAGCTATTTTTTCTTTACATTTAGCAGGTATTTCCTCTATTTTAGGAGCGATTAATTTTATTACTACAATTATTAATATACGAATTAACAGTATAAATTATGATCAAATACCACTATTTGTGTGATCAGTAGGAATTACTGCTTTACTCTTATTACTTTCTCTTCCAGTATTAGCAGGTGCTATCACTATATTATTAACGGATCGAAATTTAAATACATCATTTTTTGATCCTGCAGGAGGAGGAGATCCAATTTTATATCAACATTTATTT\" #>  #>  #> [[2]] #> [[2]]$id #> [1] \"ACRJP619-11\" #>  #> [[2]]$name #> [1] \"Lepidoptera\" #>  #> [[2]]$gene #> [1] \"ACRJP619-11\" #>  #> [[2]]$sequence #> [1] \"AACTTTATATTTTATTTTTGGTATTTGAGCAGGCATAGTAGGAACTTCTCTTAGTCTTATTATTCGAACAGAATTAGGAAATCCAGGATTTTTAATTGGAGATGATCAAATCTACAATACTATTGTTACGGCTCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGGAGGATTTGGTAATTGATTAGTTCCCCTTATACTAGGAGCCCCAGATATAGCTTTCCCTCGAATAAACAATATAAGTTTTTGGCTTCTTCCCCCTTCACTATTACTTTTAATTTCCAGAAGAATTGTTGAAAATGGAGCTGGAACTGGATGAACAGTTTATCCCCCACTGTCATCTAATATTGCCCATAGAGGTACATCAGTAGATTTAGCTATTTTTTCTTTACATTTAGCAGGTATTTCCTCTATTTTAGGAGCGATTAATTTTATTACTACAATTATTAATATACGAATTAACAGTATAAATTATGATCAAATACCACTATTTGTGTGATCAGTAGGAATTACTGCTTTACTCTTATTACTTTCTCTTCCAGTATTAGCAGGTGCTATCACTATATTATTAACGGATCGAAATTTAAATACATCATTTTTTGATCCTGCAGGAGGAGGAGATCCAATTTTATATCAACATTTATTT\" bold_seq(container = 'ACRJP')[[1]] #> $id #> [1] \"ACRJP003-09\" #>  #> $name #> [1] \"Lepidoptera\" #>  #> $gene #> [1] \"ACRJP003-09\" #>  #> $sequence #> [1] \"AACATTATATTTTATTTTTGGGATCTGATCTGGAATAGTAGGGACATCTTTAAGTATACTAATTCGAATAGAACTAGGAAATCCTGGATGTTTAATTGGGGATGATCAAATTTATAATACTATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATACCCATTATAATTGGAGGTTTTGGCAATTGACTTGTACCATTAATATTAGGAGCCCCTGATATAGCATTTCCCCGAATAAATAATATAAGATTTTGACTTCTTCCCCCCTCATTAATTTTATTAATTTCAAGAAGAATTGTTGAAAATGGAGCAGGAACAGGATGAACAGTCTATCCTCCATTATCTTCTAATATTGCGCATAGAGGATCCTCTGTTGATTTAGCTATTTTCTCACTTCATTTAGCAGGAATTTCTTCTATTTTAGGAGCAATTAATTTTATTACAACTATTATTAATATACGAATAAATAATTTACTTTTTGACCAAATACCTCTATTTGTTTGAGCAGTAGGTATTACAGCTGTTCTTCTTTTATTATCATTACCAGTATTAGCAGGAGCAATTACCATACTATTAACAGATCGTAATTTAAATACTTCTTTCTTTGATCCTGCTGGAGGAGGAGATCCAATTTTATACCAACATTTATTT\" bold_seq(bin = 'BOLD:AAA5125')[[1]] #> $id #> [1] \"ASARD6776-12\" #>  #> $name #> [1] \"Eacles ormondei\" #>  #> $gene #> [1] \"ASARD6776-12\" #>  #> $sequence #> [1] \"AACTTTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGAACTTCTTTAAGATTACTAATTCGAGCAGAATTAGGTACCCCCGGATCTTTAATTGGAGATGACCAAATTTATAATACCATTGTAACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGGAGGATTTGGAAATTGATTAGTACCCCTAATACTAGGAGCTCCTGATATAGCTTTCCCCCGAATAAATAATATAAGATTTTGACTATTACCCCCATCTTTAACCCTTTTAATTTCTAGAAGAATTGTCGAAAATGGAGCTGGAACTGGATGAACAGTTTATCCCCCCCTTTCATCTAATATTGCTCATGGAGGCTCTTCTGTTGATTTAGCTATTTTTTCCCTTCATCTAGCTGGAATCTCATCAATTTTAGGAGCTATTAATTTTATCACAACAATCATTAATATACGACTAAATAATATAATATTTGACCAAATACCTTTATTTGTATGAGCTGTTGGTATTACAGCATTTCTTTTATTGTTATCTTTACCTGTACTAGCTGGAGCTATTACTATACTTTTAACAGATCGAAACTTAAATACATCATTTTTTGACCCAGCAGGAGGAGGAGATCCTATTCTCTATCAACATTTATTT\""},{"path":"https://docs.ropensci.org/bold/articles/bold.html","id":"search-for-specimen-data-only","dir":"Articles","previous_headings":"","what":"Search for specimen data only","title":"bold introduction","text":"BOLD specimen API doesn’t give back sequences, specimen data. default download tsv format data, given back data.frame can optionally get back data XML format can choose get crul response object back ’d rather work raw data returned BOLD API.","code":"res <- bold_specimens(taxon = 'Osmia') head(res[,1:8]) #>      processid   sampleid recordID catalognum   fieldnum #> 1  BEECA373-06 05-NT-0373   514740            05-NT-0373 #> 2  BEECA607-06 05-NT-0607   516959            05-NT-0607 #> 3  BEECA963-07 01-OR-0790   554153            01-OR-0790 #> 4  BEECB358-07 04-WA-1076   596920 BBSL697174 04-WA-1076 #> 5  BEECB438-07 00-UT-1157   597000 BBSL432653 00-UT-1157 #> 6 BEECC1176-09 02-UT-2849  1060879 BBSL442586 02-UT-2849 #>                    institution_storing collection_code      bin_uri #> 1   York University, Packer Collection              NA BOLD:AAI2013 #> 2   York University, Packer Collection              NA BOLD:AAC8510 #> 3   York University, Packer Collection              NA BOLD:ABZ3184 #> 4 Utah State University, Logan Bee Lab              NA BOLD:AAC5797 #> 5 Utah State University, Logan Bee Lab              NA BOLD:AAF2159 #> 6   York University, Packer Collection              NA BOLD:AAE5368 bold_specimens(taxon = 'Osmia', format = 'xml') <?xml version=\"1.0\" encoding=\"UTF-8\"?> <bold_records  xsi:noNamespaceSchemaLocation=\"http://www.boldsystems.org/schemas/BOLDPublic_record.xsd\"  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">   <record>     <record_id>1470124<\/record_id>     <processid>BOM1525-10<\/processid>     <bin_uri>BOLD:AAN3337<\/bin_uri>     <specimen_identifiers>       <sampleid>DHB 1011<\/sampleid>       <catalognum>DHB 1011<\/catalognum>       <fieldnum>DHB1011<\/fieldnum>       <institution_storing>Marjorie Barrick Museum<\/institution_storing>     <\/specimen_identifiers>     <taxonomy> res <- bold_specimens(taxon = 'Osmia', format = 'xml', response = TRUE) res$url #> [1] \"https://v4.boldsystems.org/index.php/API_Public/specimen?taxon=Osmia&format=xml\" res$status_code #> [1] 200 res$response_headers #> $status #> [1] \"HTTP/2 200 \" #>  #> $server #> [1] \"nginx\" #>  #> $date #> [1] \"Mon, 20 Apr 2020 16:23:41 GMT\" #>  #> $`content-type` #> [1] \"application/x-download\" #>  #> $`x-powered-by` #> [1] \"PHP/5.3.15\" #>  #> $`content-disposition` #> [1] \"attachment; filename=bold_data.xml\" #>  #> $`x-frame-options` #> [1] \"SAMEORIGIN\" #>  #> $`x-content-type-options` #> [1] \"nosniff\" #>  #> $`x-xss-protection` #> [1] \"1; mode=block\""},{"path":"https://docs.ropensci.org/bold/articles/bold.html","id":"search-for-specimen-plus-sequence-data","dir":"Articles","previous_headings":"","what":"Search for specimen plus sequence data","title":"bold introduction","text":"specimen/sequence combined API gives back specimen sequence data. Like specimen API, one gives default tsv format data, given back data.frame. , ’re setting sepfasta=TRUE sequence data given back list, taken data.frame returned data.frame manageable. can index specific sequence like","code":"res <- bold_seqspec(taxon = 'Osmia', sepfasta = TRUE) res$fasta[1:2] #> $`BEECA373-06` #> [1] \"-ATTTTATATATAATTTTTGCTATATGATCAGGTATAATCGGATCAGCAATAAGAATTATTATTCGTATAGAATTAAGAATTCCTGGTTCATGAATTTCAAATGATCAAACTTATAACTCTTTAGTAACTGCTCATGCTTTTTTAATAATTTTTTTCTTAGTTATACCTTTTTTAATTGGAGGATTTGGAAATTGATTAATTCCTTTAATATTAGGAATCCCGGATATAGCTTTCCCTCGAATAAATAATATTAGATTTTGACTTTTACCCCCTTCATTAATATTATTACTTTTAAGAAATTTTATAAATCCAAGACCAGGTACTGGATGAACTGTTTATCCTCCTCTTTCTTCTCATTTATTTCATTCTTCTCCTTCAGTTGATATAGCCATTTTTTCTTTACATATTTCCGGTTTATCTTCTATTATAGGTTCGTTAAATTTTATTGTTACAATTATTATAATAAAAAATATTTCTTTAAAACATATCCAATTACCTTTATTTCCATGATCTGTTTTTATTACTACTATCTTATTACTTTTTTCTTTACCTGTTTTAGCAGGAGCTATTACTATATTATTATTTGATCGAAATTTTAATACTTCATTTTTTGATCCTACAGGAGGTGGAGATCCAATCCTTTATCAACATTTATTT\" #>  #> $`BEECA607-06` #> [1] \"AATATTATATATAATTTTTGCTTTGTGATCTGGAATAATTGGTTCATCTATAAGAATTATTATTCGTATAGAATTAAGAATTCCTGGTTCATGAATTTCAAATGATCAAGTTTATAATTCATTAGTTACAGCTCATGCTTTTTTAATAATTTTTTTTTTAGTTATACCATTTATAATTGGAGGATTTGGAAATTGATTAGTTCCTTTAATATTAGGAATTCCTGATATAGCTTTTCCTCGAATAAATAATATTAGATTTTGATTATTACCACCATCATTAATACTTTTACTTTTAAGAAATTTTTTTAATCCAAGTTCAGGAACTGGATGAACTGTATATCCTCCTCTTTCATCATATTTATTTCATTCTTCACCTTCTGTTGATTTAGCTATTTTTTCTCTTCATATATCAGGTTTATCTTCTATTATAGGTTCATTAAACTTTATTGTAACTATTATTATAATAAAAAATATTTCTTTAAAGTATATTCAATTGCCATTATTTCCATGATCTGTTTTTATTACTACAATTCTTTTATTATTATCATTACCAGTTTTAGCAGGTGCTATTACTATATTATTATTTGATCGAAATTTTAATACTTCATTTTTTGATCCTACAGGAGGGGGAG--------------------------\" res$fasta['GBAH0293-06'] #> $`GBAH0293-06` #> [1] \"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------TTAATGTTAGGGATTCCAGATATAGCTTTTCCACGAATAAATAATATTAGATTTTGACTGTTACCTCCATCTTTAATATTATTACTTTTAAGAAATTTTTTAAATCCAAGTCCTGGAACAGGATGAACAGTTTATCCTCCTTTATCATCAAATTTATTTCATTCTTCTCCTTCAGTTGATTTAGCAATTTTTTCTTTACATATTTCAGGTTTATCTTCTATTATAGGTTCATTAAATTTTATTGTTACAATTATTATAATAAAAAATATTTCTTTAAAATATATTCAATTACCTTTATTTTCTTGATCTGTATTTATTACTACTATTCTTTTATTATTTTCTTTACCTGTATTAGCTGGAGCTATTACTATATTATTATTTGATCGAAATTTTAATACATCTTTTTTTGATCCAACAGGAGGGGGAGATCCAATTCTTTATCAACATTTATTTTGATTTTTTGGTCATCCTGAAGTTTATATTTTAATTTTACCTGGATTTGGATTAATTTCTCAAATTATTTCTAATGAAAGAGGAAAAAAAGAAACTTTTGGAAATATTGGTATAATTTATGCTATATTAAGAATTGGACTTTTAGGTTTTATTGTT---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\""},{"path":"https://docs.ropensci.org/bold/articles/bold.html","id":"get-trace-files","dir":"Articles","previous_headings":"","what":"Get trace files","title":"bold introduction","text":"function downloads files machine - load R session - prints files information.","code":"bold_trace(taxon = 'Osmia', quiet = TRUE)"},{"path":"https://docs.ropensci.org/bold/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Salix Dubois. Author, maintainer. Scott Chamberlain. Author.","code":""},{"path":"https://docs.ropensci.org/bold/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dubois S, Chamberlain S (2024). bold: Interface Bold Systems API. R package version 1.3.0, https://github.com/ropensci/bold (source), https://docs.ropensci.org/bold/ (documentation).","code":"@Manual{,   title = {bold: Interface to Bold Systems API},   author = {Salix Dubois and Scott Chamberlain},   year = {2024},   note = {R package version 1.3.0, https://github.com/ropensci/bold (source)},   url = {https://docs.ropensci.org/bold/ (documentation)}, }"},{"path":"https://docs.ropensci.org/bold/index.html","id":"bold","dir":"","previous_headings":"","what":"Interface to Bold Systems API","title":"Interface to Bold Systems API","text":"bold accesses BOLD barcode data. Barcode Life Data Systems (BOLD) designed support generation application DNA barcode data. platform consists four main modules: data portal, database barcode clusters, educational portal, data collection workbench. package retrieves data BOLD database barcode clusters, allows searching 1.7M public records using multiple search criteria including sequence data, specimen data, specimen plus sequence data, well trace files. Documentation BOLD API: http://v4.boldsystems.org/index.php/api_home See also taxize book options taxonomic workflows BOLD: https://taxize.dev/","code":""},{"path":"https://docs.ropensci.org/bold/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interface to Bold Systems API","text":"Installation instructions Stable Version Development Version Install sangerseqR first ’re planning downloading reading trace files. (package used function bold::bold_read_trace()) R < 3.5 R >= 3.5 install bold","code":"install.packages(\"bold\") source(\"http://bioconductor.org/biocLite.R\") biocLite(\"sangerseqR\") if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"sangerseqR\") remotes::install_github(\"ropensci/bold\")"},{"path":"https://docs.ropensci.org/bold/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Interface to Bold Systems API","text":"","code":"library(\"bold\")"},{"path":"https://docs.ropensci.org/bold/index.html","id":"search-for-sequence-data-only","dir":"","previous_headings":"Usage","what":"Search for sequence data only","title":"Interface to Bold Systems API","text":"Default get list back can optionally get back crul response object","code":"bold_seq(taxon='Coelioxys')[[1]] #> $id #> [1] \"ABEE117-17\" #>  #> $name #> [1] \"Coelioxys elongata\" #>  #> $gene #> [1] \"ABEE117-17\" #>  #> $sequence #> [1] \"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------TTATCATTATATACATATCATCCTTCCCCATCAGTTGATTTAGCAATTTTTTYTTTACATTTATCAGGAATTTYTTYTATTATCGGATCAATAAATTTTATTGTAACAATTTTAATAATAAAAAATTATTCAATAAATTATAATCAAATACCTTTATTTCCATGATCAATTTTAATTACTACAATTTTATTATTATTATCATTACCTGTATTAGCAGGAGCTATTACAATATTATTATTTGATCGTAATTTAAATTCATCATTTTTTGACCCAATAGGAGGAGGAGATCCTATTTTATATCAACATTTATTTTG------------------------------------\" res <- bold_seq(taxon='Coelioxys', response=TRUE) res$response_headers #> $status #> [1] \"HTTP/2 200 \" #>  #> $server #> [1] \"nginx\" #>  #> $date #> [1] \"Mon, 20 Apr 2020 16:11:50 GMT\" #>  #> $`content-type` #> [1] \"application/x-download\" #>  #> $`x-powered-by` #> [1] \"PHP/5.3.15\" #>  #> $`content-disposition` #> [1] \"attachment; filename=fasta.fas\" #>  #> $`x-frame-options` #> [1] \"SAMEORIGIN\" #>  #> $`x-content-type-options` #> [1] \"nosniff\" #>  #> $`x-xss-protection` #> [1] \"1; mode=block\""},{"path":"https://docs.ropensci.org/bold/index.html","id":"search-for-specimen-data-only","dir":"","previous_headings":"Usage","what":"Search for specimen data only","title":"Interface to Bold Systems API","text":"default download tsv format data, given back data.frame.","code":"res <- bold_specimens(taxon='Osmia') head(res[,1:8]) #>      processid   sampleid recordID catalognum   fieldnum #> 1  BEECA373-06 05-NT-0373   514740            05-NT-0373 #> 2  BEECA607-06 05-NT-0607   516959            05-NT-0607 #> 3  BEECA963-07 01-OR-0790   554153            01-OR-0790 #> 4  BEECB358-07 04-WA-1076   596920 BBSL697174 04-WA-1076 #> 5  BEECB438-07 00-UT-1157   597000 BBSL432653 00-UT-1157 #> 6 BEECC1176-09 02-UT-2849  1060879 BBSL442586 02-UT-2849 #>                    institution_storing collection_code      bin_uri #> 1   York University, Packer Collection              NA BOLD:AAI2013 #> 2   York University, Packer Collection              NA BOLD:AAC8510 #> 3   York University, Packer Collection              NA BOLD:ABZ3184 #> 4 Utah State University, Logan Bee Lab              NA BOLD:AAC5797 #> 5 Utah State University, Logan Bee Lab              NA BOLD:AAF2159 #> 6   York University, Packer Collection              NA BOLD:AAE5368"},{"path":"https://docs.ropensci.org/bold/index.html","id":"search-for-specimen-plus-sequence-data","dir":"","previous_headings":"Usage","what":"Search for specimen plus sequence data","title":"Interface to Bold Systems API","text":"default download tsv format data, given back data.frame. can get sequences separated list sepfasta=TRUE. can index specific sequence like Note: can get several sequences one process id. example: reason process different sequences different markers.","code":"res <- bold_seqspec(taxon='Osmia', sepfasta=TRUE) res$fasta[1:2] #> $`BEECA373-06` #> [1] \"-ATTTTATATATAATTTTTGCTATATGATCAGGTATAATCGGATCAGCAATAAGAATTATTATTCGTATAGAATTAAGAATTCCTGGTTCATGAATTTCAAATGATCAAACTTATAACTCTTTAGTAACTGCTCATGCTTTTTTAATAATTTTTTTCTTAGTTATACCTTTTTTAATTGGAGGATTTGGAAATTGATTAATTCCTTTAATATTAGGAATCCCGGATATAGCTTTCCCTCGAATAAATAATATTAGATTTTGACTTTTACCCCCTTCATTAATATTATTACTTTTAAGAAATTTTATAAATCCAAGACCAGGTACTGGATGAACTGTTTATCCTCCTCTTTCTTCTCATTTATTTCATTCTTCTCCTTCAGTTGATATAGCCATTTTTTCTTTACATATTTCCGGTTTATCTTCTATTATAGGTTCGTTAAATTTTATTGTTACAATTATTATAATAAAAAATATTTCTTTAAAACATATCCAATTACCTTTATTTCCATGATCTGTTTTTATTACTACTATCTTATTACTTTTTTCTTTACCTGTTTTAGCAGGAGCTATTACTATATTATTATTTGATCGAAATTTTAATACTTCATTTTTTGATCCTACAGGAGGTGGAGATCCAATCCTTTATCAACATTTATTT\" #>  #> $`BEECA607-06` #> [1] \"AATATTATATATAATTTTTGCTTTGTGATCTGGAATAATTGGTTCATCTATAAGAATTATTATTCGTATAGAATTAAGAATTCCTGGTTCATGAATTTCAAATGATCAAGTTTATAATTCATTAGTTACAGCTCATGCTTTTTTAATAATTTTTTTTTTAGTTATACCATTTATAATTGGAGGATTTGGAAATTGATTAGTTCCTTTAATATTAGGAATTCCTGATATAGCTTTTCCTCGAATAAATAATATTAGATTTTGATTATTACCACCATCATTAATACTTTTACTTTTAAGAAATTTTTTTAATCCAAGTTCAGGAACTGGATGAACTGTATATCCTCCTCTTTCATCATATTTATTTCATTCTTCACCTTCTGTTGATTTAGCTATTTTTTCTCTTCATATATCAGGTTTATCTTCTATTATAGGTTCATTAAACTTTATTGTAACTATTATTATAATAAAAAATATTTCTTTAAAGTATATTCAATTGCCATTATTTCCATGATCTGTTTTTATTACTACAATTCTTTTATTATTATCATTACCAGTTTTAGCAGGTGCTATTACTATATTATTATTTGATCGAAATTTTAATACTTCATTTTTTGATCCTACAGGAGGGGGAG--------------------------\" res$fasta['GBAH0293-06'] #> $`GBAH0293-06` #> [1] \"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------TTAATGTTAGGGATTCCAGATATAGCTTTTCCACGAATAAATAATATTAGATTTTGACTGTTACCTCCATCTTTAATATTATTACTTTTAAGAAATTTTTTAAATCCAAGTCCTGGAACAGGATGAACAGTTTATCCTCCTTTATCATCAAATTTATTTCATTCTTCTCCTTCAGTTGATTTAGCAATTTTTTCTTTACATATTTCAGGTTTATCTTCTATTATAGGTTCATTAAATTTTATTGTTACAATTATTATAATAAAAAATATTTCTTTAAAATATATTCAATTACCTTTATTTTCTTGATCTGTATTTATTACTACTATTCTTTTATTATTTTCTTTACCTGTATTAGCTGGAGCTATTACTATATTATTATTTGATCGAAATTTTAATACATCTTTTTTTGATCCAACAGGAGGGGGAGATCCAATTCTTTATCAACATTTATTTTGATTTTTTGGTCATCCTGAAGTTTATATTTTAATTTTACCTGGATTTGGATTAATTTCTCAAATTATTTCTAATGAAAGAGGAAAAAAAGAAACTTTTGGAAATATTGGTATAATTTATGCTATATTAAGAATTGGACTTTTAGGTTTTATTGTT---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\" res <- bold_seqspec(taxon='Salix', sepfasta=TRUE) res$fasta[names(res$fasta) == \"SALIX204-08\"] #> $SALIX204-08 #> CCGCCCCTAA------ATTTACAAATTACCAAGATTCGAATTTATAACATTTACTATTCAATTTAACC-------------------TTTTTTTATAAGTCTTA-------------------------TAAGAAAGAAATACAAAAGTAAAAAAAAAA-TTATTTAAGGAGCAATGCCAACCCTCTTGATAGAACAAGAAATTGGCGATTGCTCCTTTTTTTTTTTT--CAAAAGCTCGTACACACTAAGACAAAAGTCTTATCCATTTACAAAAGTCTTATCCATTTGT #> $SALIX204-08 #> [1] ATTGGAACGCCAAGTTGCTCTTGATTCGGGGGTTCCTGCTATAGCCGAACACGAGGGAAAGATAATTTATACCGACATTGACAAGATTATTTTATCGGGGAATGGTTATACTGTAAGCATTCCATTAGTTATGTATCAACGTTCCAACAAAAATACCTGTATGCATCAAAAAACTCAGGTTCAGCGAGGAAAATGCATTAAAAGGGGACAAGTTTTGGCGGACGGTGCCGCTACAGTTGGTGGCGAACTCGCCTTGGGCAAAAACATATTAGTAGCTTATATGCCATGGGAAGGCTACAATTTTGAAGATGCGGTACTCATTAGCGAACGTCTGGTATATGAAGATGTTTATACTTCT #> $SALIX204-08 #> [1] TATTGGATTTGTTGCTAAAATATCGGTATTAAACCCGAAACTCCCGGCGGATGACCAGTGACCCAAGGAAACGAAAGAATCGGTTATATTTTTCATACGATCTCCTCTTATTATAGACAGACTAATTATCTATTTATTTTTTTTTTT---TTAT-TATTCATTTACCTATTTCTAAATAGTAACTAGAGTCAAAAATATATTCAATTTCTATTAA--------------------TTAGAAATTTATTTTTTGTTCAATTGTAAATTTCTAATTAAGAACAATACTTAGTAAAATTGGGTATCAGGTCTTGTGCCAATTGCAAAATATCTACTTTA--TTTTTTTTTGTTACAACACTTCCTTAAAAAAGT-TTGGATTGGACTAACGAAGAAAGGGGAAGGAAGAAAGTGAATCAGTATACTAATTCCTCATCCCCCAATCAATCCTTCCCGTTGGGTTATTGTCCCAAT-AAAAATAAAACGAAATAAATAATTGTAGGAGTAAAATCTTGATAGAATTCGAAAAAGCAAGTACAAGAAATAAT-AAAAAAAAAATACGTA----------TTTTTTTTTTATTTTATAGGATTAGATTAAACAAAT #> $SALIX204-08 #> [1] CTGCTGTAAGTTTTCGATGAAATTTTGAATACTATCCTAGAATAATTAATAATTCATGAGTTATTCAAGAGAAAAAATTCTACTAATTGATAAGATCAGATA--------------------AGTCTTCTAGTTCTTTCTAGTTCTTTATAGTCTAGGCCCTTGATTCAAACATTGAAGTTATTGTATAAACGTGAAAAATCTGGATTACCTACCCCATCTCCTCATTCTGAACTTTTTTCCATTCTATT----------------AAAAAAAACCTATTCGGTTAGATCCACCCGAAATAT------GGAATTTTCGGTATAAAAGCAAATTTTTGGCACACAAGACTCGACTCTTATTACA--------------------AATGAATTTAGAAAAATGCTTTTCTATTTCGAAAAAGTTCTAGAAACCACTTCATTTCTTGGTGTCAAAATGGGATATATGGTATAAATATAGAGAATCTATTTTCTTTTTTTCCAAACAAAAAAAAAA----GATCTTGGAGATTGTCTA #> $SALIX204-08 #> [1] TGAGACTATGCTTGGCAAACGGGTTGATTATTCGGGGCGTTCCGTTATTGTCGTAGGCCCCTCACTTTCATTACATCGATGTGGATTGCCTCGCGAAATTGCAATAGAGCTTTTCCAGACATTTGTAATTCGTGGTCTAATTAGGCAACATCTTGCTTCAAACATAGGAGTTGCTAAGAGTAAAATTCGGGAAAAAGAGCCAATTGTATGGGGAATACTTCAGGAGGTTATGCGAGGACATCCTATATTGCTAAATAGAGCGCCTACTCTGCATAGATTAGGCATACAGGCATTCCAACCCATTTTAGTGGAAGGACGTGCTATTTGTTTACATCCATTAGTTCGTAAGGGATTCAATGCAGATTTTGATGGGGATCAAATGGCTGTTCATGTACCTTTATCGTTGGAGGCTCAAGCGGAGGCTCGTTTACTTATGTTTTCTCATATGAATCTCT #> $SALIX204-08 #> [1] CAAACAGAAACTAAAGCAAGTGTTGGATTCAAGGCTGGTGTTAAAGATTATAAATTGACTTATTATACTCCTGAATATGAAACCAAAGATACTGATATCTTGGCAGCATTCCGAGTAACTCCTCAACCTGGAGTTCCGCCCGAGGAAGCAGGGGCCGCGGTAGCTGCTGAATCTTCTACTGGTACATGGACAACTGTGTGGACCGACGGGCTTACCAGTCTTGATCGTTATAAGGGACGATGCTACGACATCGAGCCCGTTGCTGGAGAAGAAAATCAATATATTGCTTATGTAGCTTACCCCTTAGACCTTTTTGAAGAAGGTTCTGTTACTAACATGTTTACTTCCATTGTGGGTAATGTATTTGGGTTCAAAGCCCTACGCGCTCTACGTCTAGAGGATTTGCGAATTCCTACTGCTTATGTTAAAACTTTTCAAGGCCCACCTCATGGTATCCAAGTTGAGAGAGATAAATTGAATAAGTATGGTCGCCCCCTATTGGGCTGTACTATTAAACCTAAATTGGGGTTATCCGCTAAGAATTACGGTAGAGCAGTTTATGAATGTCTACGCGGTGGACTTGATTTTACCAAAGATGATGAGAACGTGAACTCCCAACCATTTATGCGTTGGA #> $SALIX204-08 #> [1] TTTCCACATTTAAATTATGTGTCAAATGGACTAATACCCTACCCCATCCATCTAGAAAAATTGGTTCAAATCCTTCGCTATTGGGTGAAAGATCCCTCCTCTTTGCATTTATTACGACTCTTTCTTCACGAGTATTGGAATTTGAACAGTCGTATTATTCCAAAGAAATCTATTTCTTTTTTTGCAAAAAAGACTCCAAGATTCTTCTTGTTCTTATATAATTCTCATGTATATGAATACGAGTCCGTTTTCTTTTTTCTTTGTAATCAATCCTTTCATTTCCGATTAACATTTTCTCAGGTCTTTCTTGAGCGAATATATTTCTATGGAAAAATAGAACATTTTGTA---------GAAGTCTTTACTAAGGATTGGGGGGACAGCCTATGCTTGCTCAAGGATCCTTTCATACATTATCTTAGATATCAAGGAAAATCCATTTTTGTCTCAAAGGATACGCCTCTTCTGATGAAAAAATGGAAATATTACCTTGTCAATTTATGTCAATGTCATTTTGATGTGTGCTTTCAACCCCCCAGGATCCATATAAACCCATTTTCATTATACAAGCATTCTTTCGCCTTATTAGGTTATCTTTCAAGTTCAAGTGTACGACTAAACCTTTCAGTGGTACGGAGTCAAATGCTAGAAAATGCATTTCTAATAGATAATATTATGAATAAACTCGATACAACAGTTTCAATTATTCCTTTGATTGGATCATTAGCAAAACTGAAATTTTGTAACGCAGTAGGACATCCCATTAGTAAACCGGCCTGGGCCGATTTTTCGGATTCTGATATTATCGACCGATTTGTCCGTATATGCAGAAATCTTTCTCATTATTATAGCGGATCCTCAAGAAAAAAGAGTTTGTATCGAATAAAATATATAC #> $SALIX204-08 #> [1] TGCAGAATCCCGTGAACCATCGAGTCTTTGAACGCAAGTTGCGCCCGAGGCCTCCTGGTCGAGGGCACGTCTGCCT---GGGTGTCACGCATCGTCGCCCCC-------ACTCCCCTCG-------------------------GCTCACGAGGGCGGGGGCGGATACTGGTCTCCCGCGCGCTCCCGCCCGTGGTTGGCCT-AAAATCGAGTCCT-CGGCGGCGGTTGCC----ACGACAAGCGGTGGTTG-----------------------AGAGACCCTCGGACACGGTCGTGCGCGTGCTTG---------------------TCGCCCCCGGGAC--------------CTCCCGGACCCCCGAGCATTGGCTTTC-----------AAG-------------GATGCTCTCGTTGCGACCCCAGGTCAGGCGGGACTACCCGCTGAGTTTAA res$data[names(res$fasta) == \"SALIX204-08\", \"markercode\"] #>[1] \"trnH-psbA\" \"rpoB\"      \"atpF-atpH\" \"psbK-psbI\" \"rpoC1\"     \"rbcLa\"     \"matK\"      \"ITS2\""},{"path":"https://docs.ropensci.org/bold/index.html","id":"get-trace-files","dir":"","previous_headings":"Usage","what":"Get trace files","title":"Interface to Bold Systems API","text":"function downloads files machine - load R session - prints files information. read files, can use bold::bold_read_trace() either boldtrace object subset paths.","code":"traces1 <- bold_trace(ids = 'ACRJP618-11', progress = FALSE) traces1 #><bold trace files>  #> #>./bold_trace_files/ACRJP618-11[LepF1,LepR1]_F.ab1 traces2 <- bold::bold_trace(ids = 'SALIX204-08', progress = FALSE) traces2 #> <bold trace files>  #>  #> ./bold_trace_files/ACRJP618-11[LepF1,LepR1]_F.ab1 #> ./bold_trace_files/SALIX204-08[MatK-1RKIM-f,MatK-3FKIM-r]_F.ab1 #> ./bold_trace_files/SALIX204-08[MatK-1RKIM-f,MatK-3FKIM-r]_R.ab1 #> ./bold_trace_files/SALIX204-08[rbcLa-F,rbcLa-R]_F.ab1 #> ./bold_trace_files/SALIX204-08[rbcLa-F,rbcLa-R]_R.ab1 bold_read_trace(trace1) #> $`ACRJP618-11[LepF1,LepR1]_F.ab1` #> Number of datapoints: 8877 #> Number of basecalls: 685 #>  #> Primary Basecalls: NNNNNNNNNNNNNNNNNNGNNNTTGAGCAGGNATAGTAGGANCTTCTCTTAGTCTTATTATTCGAACAGAATTAGGAAATCCAGGATTTTTAATTGGAGATGATCAAATCTACAATACTATTGTTACGGCTCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGGAGGATTTGGTAATTGATTAGTTCCCCTTATACTAGGAGCCCCAGATATAGCTTTCCCTCGAATAAACAATATAAGTTTTTGGCTTCTTCCCCCTTCACTATTACTTTTAATTTCCAGAAGAATTGTTGAAAATGGAGCTGGAACTGGATGAACAGTTTATCCCCCACTGTCATCTAATATTGCCCATAGAGGTACATCAGTAGATTTAGCTATTTTTTCTTTACATTTAGCAGGTATTTCCTCTATTTTAGGAGCGATTAATTTTATTACTACAATTATTAATATACGAATTAACAGTATAAATTATGATCAAATACCACTATTTGTGTGATCAGTAGGAATTACTGCTTTACTCTTATTACTTTCTCTTCCAGTATTAGCAGGTGCTATCACTATATTATTAACGGATCGAAATTTAAATACATCATTTTTTGATCCTGCAGGAGGAGGAGATCCAATTTTATATCAACATTTATTTTGATTTTTTGGACNTCNNNNAAGTTTAAN #>  #> Secondary Basecalls:  bold_read_trace(trace2$ab1[1:2]) ># $`ACRJP618-11[LepF1,LepR1]_F.ab1` ># Number of datapoints: 8877 ># Number of basecalls: 685 >#  ># Primary Basecalls: NNNNNNNNNNNNNNNNNNGNNNTTGAGCAGGNATAGTAGGANCTTCTCTTAGTCTTATTATTCGAACAGAATTAGGAAATCCAGGATTTTTAATTGGAGATGATCAAATCTACAATACTATTGTTACGGCTCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGGAGGATTTGGTAATTGATTAGTTCCCCTTATACTAGGAGCCCCAGATATAGCTTTCCCTCGAATAAACAATATAAGTTTTTGGCTTCTTCCCCCTTCACTATTACTTTTAATTTCCAGAAGAATTGTTGAAAATGGAGCTGGAACTGGATGAACAGTTTATCCCCCACTGTCATCTAATATTGCCCATAGAGGTACATCAGTAGATTTAGCTATTTTTTCTTTACATTTAGCAGGTATTTCCTCTATTTTAGGAGCGATTAATTTTATTACTACAATTATTAATATACGAATTAACAGTATAAATTATGATCAAATACCACTATTTGTGTGATCAGTAGGAATTACTGCTTTACTCTTATTACTTTCTCTTCCAGTATTAGCAGGTGCTATCACTATATTATTAACGGATCGAAATTTAAATACATCATTTTTTGATCCTGCAGGAGGAGGAGATCCAATTTTATATCAACATTTATTTTGATTTTTTGGACNTCNNNNAAGTTTAAN >#  ># Secondary Basecalls:  >#  ># $`SALIX204-08[MatK-1RKIM-f,MatK-3FKIM-r]_F.ab1` ># Number of datapoints: 16299 ># Number of basecalls: 877 >#  ># Primary Basecalls: NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTACGACTCTTTCTTCACGAGTATTGGAATTTGAACAGTCGTATTATTCCAAAGAAATCTATTTCTTTTTTTGCAAAAAAGACTCCAAGATTCTTCTTGTTCTTATATAATTCTCATGTATATGAATACGAGTCCGTTTTCTTTTTTCTTTGTAATCAATCCTTTCATTTCCGATTAACATTTTCTCAGGTCTTTCTTGAGCGAATATATTTCTATGGAAAAATAGAACATTTTGTAGAAGTCTTTACTAAGGATTGGGGGGACAGCCTATGCTTGCTCAAGGATCCTTTCATACATTATCTTAGATATCAAGGAAAATCCATTTTTGTCTCAAAGGATACGCCTCTTCTGATGAAAAAATGGAAATATTACCTTGTCAATTTATGTCAATGTCATTTTGATGTGTGCTTTCAACCCCCCAGGATCCATATAAACCCATTTTCATTATACAAGCATTCNTTCGCCTTATTAGGTTATCTTTCNAGTTCNAGTGNNCNACTNANCCTTTCAGTGGTACGGAGTCAAATGCTANAAAATGCATTTCTAATANATAATATTATGAATAAACTCGATACAACAGTTTCAATTANTCCTTTGATTGGATCATTAGCANAACTGAAATTTTGTNACGCNGTANGACATCCCATTAGTNAAACNGGCCTGNGCCGATTTTTCGGATTCTGATATTANCNACNGANTTGTCCNTNNNNNCAGAAATCNNNNTCATTNTNANNNCNGATCCNNNAGAAANANGAANTNNTATCNAATANAATATANNNTTCNNCTTTCNTGNGNNANNNCTTNGGCTCNTNANCNNNNANTNNNNAANNGN >#  ># Secondary Basecalls:"},{"path":"https://docs.ropensci.org/bold/index.html","id":"large-data","dir":"","previous_headings":"Usage","what":"Large data","title":"Interface to Bold Systems API","text":"Sometimes bold_seq(), bold_seqspec() bold_specimen() request lot data, can cause problems due BOLD’s servers. example taxonomic name Arthropoda. send request like bold_seq(taxon = \"Arthropoda\"), bold_seqspec(taxon = \"Arthropoda\") bold_specimen(taxon = \"Arthropoda\") BOLD attempts give back sequences /specimen information records Arthropoda. , can imagine, lot sequences. Using taxize::downstream get children Arthropoda Optionally, check name exists BOLD’s data. BOLD give back row NAs pass names bold_seq(). pass names , ’re trying avoid large data request problem , run one separately lapply loop like request.","code":"library(\"taxize\") x <- downstream(\"Arthropoda\", db = \"ncbi\", downto = \"class\") #> ══  1 queries  ═══════════════ #> ✔  Found:  Arthropoda #> ══  Results  ═════════════════ #>  #> ● Total: 1  #> ● Found: 1  #> ● Not Found: 0 nms <- x$Arthropoda$childtaxa_name checks <- bold_tax_name(nms) # all is good checks[,1:5] #>     taxid         taxon tax_rank tax_division parentid #> 1   26059   Pycnogonida    class     Animalia       20 #> 2      63     Arachnida    class     Animalia       20 #> 3      74   Merostomata    class     Animalia       20 #> 4  493944     Pauropoda    class     Animalia       20 #> 5   80390      Symphyla    class     Animalia       20 #> 6      85     Diplopoda    class     Animalia       20 #> 7      75     Chilopoda    class     Animalia       20 #> 8      82       Insecta    class     Animalia       20 #> 9     372    Collembola    class     Animalia       20 #> 10 734357       Protura    class     Animalia       20 #> 11     84     Remipedia    class     Animalia       20 #> 12     73 Cephalocarida    class     Animalia       20 #> 13     68  Branchiopoda    class     Animalia       20 #> 14 765970   Hexanauplia    class     Animalia       20 #> 15     69  Malacostraca    class     Animalia       20 #> 16 889450 Ichthyostraca    class     Animalia       20 #> 17     NA          <NA>     <NA>         <NA>       NA #> 18     80     Ostracoda    class     Animalia       20 out <- lapply(nms, bold_seq)"},{"path":"https://docs.ropensci.org/bold/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Interface to Bold Systems API","text":"Get citation information bold R running: citation(package = 'bold')","code":""},{"path":"https://docs.ropensci.org/bold/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Interface to Bold Systems API","text":"Please report issues bugs License: MIT Get citation information bold R citation(package = 'bold') Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/bold/reference/b_sepFasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate sequences (fasta) from bold_seqspec output. — b_sepFasta","title":"Separate sequences (fasta) from bold_seqspec output. — b_sepFasta","text":"Separate sequences (fasta) bold_seqspec output.","code":""},{"path":"https://docs.ropensci.org/bold/reference/b_sepFasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate sequences (fasta) from bold_seqspec output. — b_sepFasta","text":"","code":"b_sepFasta(x, format = \"tsv\")"},{"path":"https://docs.ropensci.org/bold/reference/b_sepFasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate sequences (fasta) from bold_seqspec output. — b_sepFasta","text":"x (object) output bold_seqspec call. format (character) format used bold_seqspec call. One 'tsv' (default) 'xml'.","code":""},{"path":"https://docs.ropensci.org/bold/reference/b_sepFasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate sequences (fasta) from bold_seqspec output. — b_sepFasta","text":"list length two : specimen data sequences list.","code":""},{"path":"https://docs.ropensci.org/bold/reference/b_sepFasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate sequences (fasta) from bold_seqspec output. — b_sepFasta","text":"","code":"if (FALSE) { res <- bold_seqspec(taxon='Osmia') res <- b_sepFasta(res) # (same as bold_seqspec(taxon='Osmia', sepFasta = TRUE)) }"},{"path":"https://docs.ropensci.org/bold/reference/bold-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in package bold. — bold-deprecated","title":"Deprecated functions in package bold. — bold-deprecated","text":"functions listed deprecated defunct near future. possible, alternative functions similar functionality also mentioned. Help pages deprecated functions available help(\"<function>-deprecated\").","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions in package bold. — bold-deprecated","text":"","code":"bold_identify_parents(   x,   wide = FALSE,   taxid = NULL,   taxon = NULL,   tax_rank = NULL,   tax_division = NULL,   parentid = NULL,   parentname = NULL,   taxonrep = NULL,   specimenrecords = NULL,   ... )  bold_tax_id(   id,   dataTypes = \"basic\",   includeTree = FALSE,   response = FALSE,   ... )"},{"path":"https://docs.ropensci.org/bold/reference/bold-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated functions in package bold. — bold-deprecated","text":"list length input","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold-deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated functions in package bold. — bold-deprecated","text":"DEPRECATED. See bold_identify_taxonomy. faster gets accurate  taxonomy directly record sequence. function gets unique set taxonomic names input data.frame, queries bold_tax_name get taxonomic ID, passing bold_tax_id get parent names, attaches input data. Records input data matches parent names simply get NA values added columns.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold-deprecated.html","id":"bold-identify-parents","dir":"Reference","previous_headings":"","what":"bold_identify_parents","title":"Deprecated functions in package bold. — bold-deprecated","text":"bold_identify_parents, use bold_identify_taxonomy.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold-deprecated.html","id":"filtering","dir":"Reference","previous_headings":"","what":"Filtering","title":"Deprecated functions in package bold. — bold-deprecated","text":"parameters taxid, taxon, tax_rank, tax_division, parentid, parentname,taxonrep, specimenrecords used search sent BOLD, used filtering data subset closer target want. parameters, can use regex strings since use grep internally match. Filtering narrows set matches query, removes rest. data.frame filter parameters internally result call bold_tax_name function.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold-deprecated.html","id":"wide-vs-long-format","dir":"Reference","previous_headings":"","what":"wide vs long format","title":"Deprecated functions in package bold. — bold-deprecated","text":"wide = FALSE get many rows record. Essentially, cbind taxonomic classification onto one row result bold_identify, giving many rows taxa taxonomic classification. wide = TRUE get one row record - thus dimensions input data stay . option, take just rows taxonomic ID name taxon taxonomic classification, name columns taxon rank, get phylum phylum_id, .","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold-deprecated.html","id":"bold-tax-id","dir":"Reference","previous_headings":"","what":"bold_tax_id","title":"Deprecated functions in package bold. — bold-deprecated","text":"bold_tax_id, use bold_tax_id2.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold-deprecated.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Deprecated functions in package bold. — bold-deprecated","text":"http://v4.boldsystems.org/index.php/resources/api?type=taxonomy","code":""},{"path":[]},{"path":"https://docs.ropensci.org/bold/reference/bold-deprecated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated functions in package bold. — bold-deprecated","text":"","code":"if (FALSE) { df <- bold_identify(sequences = sequences$seq2)  # long format out <- bold_identify_parents(df) str(out) head(out[[1]])  # wide format out <- bold_identify_parents(df, wide = TRUE) str(out) head(out[[1]])  x <- bold_seq(taxon = \"Satyrium\") out <- bold_identify(c(x[[1]]$sequence, x[[13]]$sequence)) res <- bold_identify_parents(out) res  x <- bold_seq(taxon = 'Diplura') out <- bold_identify(vapply(x, \"[[\", \"\", \"sequence\")[1:20]) res <- bold_identify_parents(out) } if (FALSE) { bold_tax_id(id = 88899) bold_tax_id(id = 88899, includeTree = TRUE) bold_tax_id(id = 88899, includeTree = TRUE, dataTypes = \"stats\") bold_tax_id(id = c(88899,125295))  ## dataTypes parameters bold_tax_id(id = 88899, dataTypes = \"basic\") bold_tax_id(id = 88899, dataTypes = \"stats\") bold_tax_id(id = 88899, dataTypes = \"images\") bold_tax_id(id = 88899, dataTypes = \"geo\") bold_tax_id(id = 88899, dataTypes = \"sequencinglabs\") bold_tax_id(id = 88899, dataTypes = \"depository\") bold_tax_id(id = c(88899, 125295), dataTypes = \"geo\") bold_tax_id(id = c(88899, 125295), dataTypes = \"images\")  ## Passing in NA bold_tax_id(id = NA) bold_tax_id(id = c(88899, 125295, NA))  ## get http response object only bold_tax_id(id = 88899, response=TRUE) bold_tax_id(id = c(88899, 125295), response=TRUE)  ## curl debugging bold_tax_id(id = 88899, verbose = TRUE) }"},{"path":"https://docs.ropensci.org/bold/reference/bold-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bold — bold-package","title":"bold — bold-package","text":"bold: programmatic interface Barcode Life data","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold-package.html","id":"about","dir":"Reference","previous_headings":"","what":"About","title":"bold — bold-package","text":"package gives access data BOLD System http://www.boldsystems.org/ via API (http://v4.boldsystems.org/index.php/api_home)","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold-package.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"bold — bold-package","text":"bold_specimens - Search specimen data bold_seq - Search retrieve sequences bold_seqspec - Get sequence specimen data together bold_trace - Get trace files - saves disk read_trace - Read trace files R bold_tax_name - Get taxonomic names via input names bold_tax_id - Get taxonomic names via BOLD identifiers (Deprecated) bold_tax_id2 - Get taxonomic names via BOLD identifiers (improved) bold_identify - Search match given COI sequence bold_identify_parents - Adds guessed parent ranks (Deprecated) bold_identify_taxonomy - Adds real parent ranks. Interestingly, provide xml tsv format data specimen data, provide fasta data format sequence data. specimen data can get back raw XML, data frame parsed tsv data, sequence data get back list (b/c sequences quite long make data frame unwieldy).","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter BOLD specimen + sequence data (output of bold_seqspec) — bold_filter","title":"Filter BOLD specimen + sequence data (output of bold_seqspec) — bold_filter","text":"Picks either shortest longest sequences, given grouping variable (e.g., species name)","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter BOLD specimen + sequence data (output of bold_seqspec) — bold_filter","text":"","code":"bold_filter(x, by, how = \"max\", returnTibble = TRUE)"},{"path":"https://docs.ropensci.org/bold/reference/bold_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter BOLD specimen + sequence data (output of bold_seqspec) — bold_filter","text":"x (data.frame) data.frame, returned bold_seqspec. Note combinations parameters bold_seqspec return data.frame. Stops error message data.frame. Required. (character) column group. example, want longest sequence unique species name, pass species_name. column exist, error message saying . Required. (character) one \"max\" \"min\", get used .max .min get longest shortest sequence, respectively. Note remove gap/alignment characters (-) returnTibble Whether output tibble data.frame. Default TRUE, verifies tibble package installed, , returned data.frame. Since package used function, can moved suggested instead dependency without breaking old scripts.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter BOLD specimen + sequence data (output of bold_seqspec) — bold_filter","text":"data.frame","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter BOLD specimen + sequence data (output of bold_seqspec) — bold_filter","text":"","code":"if (FALSE) { res <- bold_seqspec(taxon = 'Osmia') maxx <- bold_filter(res, by = \"species_name\") minn <- bold_filter(res, by = \"species_name\", how = \"min\")  vapply(maxx$nucleotides, nchar, 1, USE.NAMES = FALSE) vapply(minn$nucleotides, nchar, 1, USE.NAMES = FALSE) }"},{"path":"https://docs.ropensci.org/bold/reference/bold_get_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the error messages and parameters used for a request from a bold output. — bold_get_attr","title":"Get the error messages and parameters used for a request from a bold output. — bold_get_attr","text":"Get error messages parameters used request bold output. Get error messages bold output. Get parameters used request bold output.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_get_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the error messages and parameters used for a request from a bold output. — bold_get_attr","text":"","code":"bold_get_attr(x)  bold_get_errors(x)  bold_get_params(x)"},{"path":"https://docs.ropensci.org/bold/reference/bold_get_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the error messages and parameters used for a request from a bold output. — bold_get_attr","text":"x object attribute \"params\". Usually output bold_tax_name bold_tax_id2.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_get_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the error messages and parameters used for a request from a bold output. — bold_get_attr","text":"list attributes 'errors' 'params' object. 'errors' attribute object. 'params' attribute object.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_get_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the error messages and parameters used for a request from a bold output. — bold_get_attr","text":"","code":"if (FALSE) { x <- bold_tax_name(name=c(\"Apis\",\"Felis\",\"Pinus\"), tax_division = \"Animalia\") bold_get_errors(x) y <- bold_tax_id2(id = c(88899999, 125295, NA_integer_), dataTypes = c(\"basic\", \"stats\")) bold_get_errors(y) } if (FALSE) { x <- bold_tax_name(name=c(\"Apis\",\"Felis\",\"Pinus\"), tax_division = \"Animalia\") bold_get_errors(x) y <- bold_tax_id2(id = c(88899999, 125295, NA_integer_), dataTypes = c(\"basic\", \"stats\")) bold_get_errors(y) } if (FALSE) { x <- bold_tax_name(name=c(\"Apis\",\"Felis\",\"Pinus\"), tax_division = \"Animalia\") bold_get_params(x) y <- bold_tax_id2(id = c(88899999, 125295, NA_integer_), dataTypes = c(\"basic\", \"stats\")) bold_get_params(y) }"},{"path":"https://docs.ropensci.org/bold/reference/bold_identify.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for matches to sequences against the BOLD COI database. — bold_identify","title":"Search for matches to sequences against the BOLD COI database. — bold_identify","text":"Search matches sequences BOLD COI database.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_identify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for matches to sequences against the BOLD COI database. — bold_identify","text":"","code":"bold_identify(   sequences,   db = c(\"COX1\", \"COX1_SPECIES\", \"COX1_SPECIES_PUBLIC\", \"COX1_L640bp\"),   response = FALSE,   keepSeq = TRUE,   ... )"},{"path":"https://docs.ropensci.org/bold/reference/bold_identify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for matches to sequences against the BOLD COI database. — bold_identify","text":"sequences (character) vector list sequences identify. Required. See Details. db (character) database match , one COX1 (default), COX1_SPECIES, COX1_SPECIES_PUBLIC, COX1_L640bp. See Details information. response (logical) Note response object returns Curl call, useful debugging, getting detailed info API call. keepSeq (logical) TRUE (default), returns data.frame attribute 'sequence' containing sequence used get results. ... args passed verb-GET, main purpose curl debugging","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_identify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for matches to sequences against the BOLD COI database. — bold_identify","text":"data.frame  list (one per sequences) top specimen matches (100) details. query fails, returns NULL. data.frame attributes sequence provided sequence match (unless keepSeq set FALSE) errors error message given failed request.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_identify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for matches to sequences against the BOLD COI database. — bold_identify","text":"BOLD allows one sequences per query. internally lapply input values given sequences` parameter search one sequences per query. Remember lot sequences - separate query one, can take long time - run errors let us know.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_identify.html","id":"db-parameter-options","dir":"Reference","previous_headings":"","what":"db parameter options","title":"Search for matches to sequences against the BOLD COI database. — bold_identify","text":"COX1 Every COI barcode record BOLD minimum sequences length 500bp (warning: unvalidated library includes records without species level identification). includes many species represented one two specimens well species interim taxonomy. search returns list nearest matches provide probability placement taxon. COX1_SPECIES Every COI barcode record species level identification minimum sequences length 500bp. includes many species represented one two specimens well  species interim taxonomy. Note : Sometimes return matches species level identification. checking BOLD. COX1_SPECIES_PUBLIC published COI records BOLD GenBank minimum sequences length 500bp. library collection records published projects section BOLD. COX1_L640bp Subset Species library minimum sequences length 640bp containing public private records. library intended short sequences identification provides maximum overlap short reads barcode region COI.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_identify.html","id":"named-outputs","dir":"Reference","previous_headings":"","what":"Named outputs","title":"Search for matches to sequences against the BOLD COI database. — bold_identify","text":"named output list, make sure pass named list vector sequences parameter. can use names<- setNames set names list vector sequences.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_identify.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search for matches to sequences against the BOLD COI database. — bold_identify","text":"http://v4.boldsystems.org/index.php/resources/api?type=idengine","code":""},{"path":[]},{"path":"https://docs.ropensci.org/bold/reference/bold_identify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for matches to sequences against the BOLD COI database. — bold_identify","text":"","code":"if (FALSE) { seq <- sequences$seq1 res <- bold_identify(sequences=seq) head(res[[1]]) head(bold_identify(sequences=seq, db='COX1_SPECIES')[[1]]) }"},{"path":"https://docs.ropensci.org/bold/reference/bold_identify_parents-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Add taxonomic parent names to a data.frame — bold_identify_parents-deprecated","title":"Add taxonomic parent names to a data.frame — bold_identify_parents-deprecated","text":"Add taxonomic parent names data.frame","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_identify_parents-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add taxonomic parent names to a data.frame — bold_identify_parents-deprecated","text":"x (data.frame/list) list data.frames - output call bold_identify. single data.frame output . required. wide (logical) output long wide format. See Details. Default: FALSE taxid (character) taxid name. Optional. See Filtering . taxon (character) taxon name. Optional. See Filtering . tax_rank (character) tax_rank name. Optional. See Filtering . tax_division (character) tax_division name. Optional. See Filtering . parentid (character) parentid name. Optional. See Filtering . parentname (character) parentname name. Optional. See Filtering . taxonrep (character) taxonrep name. Optional. See Filtering . specimenrecords (character) specimenrecords name. Optional. See Filtering . ... args passed verb-GET, main purpose curl debugging","code":""},{"path":[]},{"path":"https://docs.ropensci.org/bold/reference/bold_identify_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Add taxonomic parent names to a data set containing the process IDs of identified sequences. — bold_identify_taxonomy","title":"Add taxonomic parent names to a data set containing the process IDs of identified sequences. — bold_identify_taxonomy","text":"Add taxonomic parent names data set containing process IDs identified sequences.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_identify_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add taxonomic parent names to a data set containing the process IDs of identified sequences. — bold_identify_taxonomy","text":"","code":"bold_identify_taxonomy(x, taxOnly = TRUE)  # S4 method for list bold_identify_taxonomy(x, taxOnly = TRUE)  # S4 method for matrix bold_identify_taxonomy(x, taxOnly = TRUE)  # S4 method for data.frame bold_identify_taxonomy(x, taxOnly = TRUE)  # S4 method for missing bold_identify_taxonomy(x, taxOnly = TRUE)"},{"path":"https://docs.ropensci.org/bold/reference/bold_identify_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add taxonomic parent names to a data set containing the process IDs of identified sequences. — bold_identify_taxonomy","text":"x single data.frame matrix, list . Usually output call bold_identify. Required. taxOnly (logical) TRUE (Default), taxonomic names ids added (equivalent format results bold_identify_parents wideis set TRUE. FALSE, also joins rest data returned bold_specimens.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_identify_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add taxonomic parent names to a data set containing the process IDs of identified sequences. — bold_identify_taxonomy","text":"data.frame list data.frames added taxonomic classification.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_identify_taxonomy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add taxonomic parent names to a data set containing the process IDs of identified sequences. — bold_identify_taxonomy","text":"function gets process ids input data.frame(s) (ID column), queries bold_specimens get sample information adds input data.frame(s). Records input data matches parent names simply get NA values added columns.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_identify_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add taxonomic parent names to a data set containing the process IDs of identified sequences. — bold_identify_taxonomy","text":"","code":"if (FALSE) { seqs <- bold_identify(sequences = bold::sequences$seq2)  seqs_tax <- bold_identify_taxonomy(seqs) head(seqs_tax[[1]])  x <- bold_seq(taxon = \"Satyrium\") seqs <- bold_identify(x$sequence[1:2]) seqs_tax <- bold_identify_taxonomy(seqs) seqs_tax }"},{"path":"https://docs.ropensci.org/bold/reference/bold_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Search BOLD for sequences. — bold_seq","title":"Search BOLD for sequences. — bold_seq","text":"Get sequences taxonomic name, id, bin, container, institution, researcher, geographic, place, gene.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search BOLD for sequences. — bold_seq","text":"","code":"bold_seq(   taxon = NULL,   ids = NULL,   bin = NULL,   container = NULL,   institutions = NULL,   researchers = NULL,   geo = NULL,   marker = NULL,   response = FALSE,   ... )"},{"path":"https://docs.ropensci.org/bold/reference/bold_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search BOLD for sequences. — bold_seq","text":"taxon (character) One taxonomic name. Optional. ids (character|integer|numeric) One IDs. Optional. IDs include Sample IDs, Process IDs, Museum IDs Field IDs. bin (character) One Barcode Index Number URI. Optional. container (character) One project codes dataset codes. Optional. institutions (character) One institution's name. Optional. Institutions Specimen Storing Site. researchers (character) One researcher names. Optional. Include collectors specimen identifiers. geo (character) One geographic sites. Includes countries province/states. marker (character) Returns records containing matching marker codes. response (logical) Default : FALSE. TRUE, returns object Curl call. Useful debugging getting detailed info API call. ... args passed crul::verb-GET, main purpose curl debugging","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search BOLD for sequences. — bold_seq","text":"data frame element row 5 columns processid, identification, marker, accession, sequence.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seq.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search BOLD for sequences. — bold_seq","text":"using taxon parameter another parameter, taxon found public database, act taxon specified try return data specified parameter. can make sure taxon looking public records bold_stats.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seq.html","id":"large-requests","dir":"Reference","previous_headings":"","what":"Large requests","title":"Search BOLD for sequences. — bold_seq","text":"requests can lead errors. often requesting data rank quite high tree, Order, example, Coleoptera. request taking long time, likely something go wrong BOLD server side, able parse result R R can process strings certain length. bold users reported errors resulting response BOLD large parse . good strategy want data high rank many separate requests lower ranks within target rank. can manually, use function taxize::downstream get names lower rank within target rank. example README (https://docs.ropensci.org/bold/#large-data)","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seq.html","id":"if-a-request-times-out","dir":"Reference","previous_headings":"","what":"If a request times out","title":"Search BOLD for sequences. — bold_seq","text":"likely request large number sequences BOLD service timed . still get output, sequences retrieved time happened. , see README (https://docs.ropensci.org/bold/#large-data) example dealing large data problems function.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seq.html","id":"marker","dir":"Reference","previous_headings":"","what":"Marker","title":"Search BOLD for sequences. — bold_seq","text":"Notes BOLD marker param: \"markers specimen matching search string returned. ie. record COI-5P return sequence data markers even COI-5P specified.\" likely end data markers request - just sure filter needed.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search BOLD for sequences. — bold_seq","text":"http://v4.boldsystems.org/index.php/resources/api?type=webservices","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search BOLD for sequences. — bold_seq","text":"","code":"if (FALSE) { bold_seq(taxon='Coelioxys') bold_seq(taxon='Aglae') bold_seq(taxon=c('Coelioxys','Osmia')) bold_seq(ids='ACRJP618-11') bold_seq(ids=c('ACRJP618-11','ACRJP619-11')) bold_seq(bin='BOLD:AAA5125') bold_seq(container='ACRJP') bold_seq(researchers='Thibaud Decaens') bold_seq(geo='Ireland') bold_seq(geo=c('Ireland','Denmark'))  # Return the http response object for detailed Curl call response details res <- bold_seq(taxon='Coelioxys', response=TRUE) res$url res$status_code res$response_headers  ## curl debugging ### You can do many things, including get verbose output on the curl ### call, and set a timeout bold_seq(taxon='Coelioxys', verbose = TRUE)[1:2] }"},{"path":"https://docs.ropensci.org/bold/reference/bold_seqspec.html","id":null,"dir":"Reference","previous_headings":"","what":"Get BOLD specimen + sequence data. — bold_seqspec","title":"Get BOLD specimen + sequence data. — bold_seqspec","text":"Get BOLD specimen + sequence data.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seqspec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get BOLD specimen + sequence data. — bold_seqspec","text":"","code":"bold_seqspec(   taxon = NULL,   ids = NULL,   bin = NULL,   container = NULL,   institutions = NULL,   researchers = NULL,   geo = NULL,   marker = NULL,   response = FALSE,   format = \"tsv\",   sepfasta = FALSE,   cleanData = FALSE,   ... )"},{"path":"https://docs.ropensci.org/bold/reference/bold_seqspec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get BOLD specimen + sequence data. — bold_seqspec","text":"taxon (character) One taxonomic name. Optional. ids (character|integer|numeric) One IDs. Optional. IDs include Sample IDs, Process IDs, Museum IDs Field IDs. bin (character) One Barcode Index Number URI. Optional. container (character) One project codes dataset codes. Optional. institutions (character) One institution's name. Optional. Institutions Specimen Storing Site. researchers (character) One researcher names. Optional. Include collectors specimen identifiers. geo (character) One geographic sites. Includes countries province/states. marker (character) Returns records containing matching marker codes. See Details. response (logical) Default : FALSE. TRUE, returns object Curl call. Useful debugging getting detailed info API call. format (character) One xml tsv (default). tsv format gives back data.frame object. xml gives back parsed xml list. sepfasta (logical) TRUE, fasta data separated list names matching processid's records. Works 'tsv' 'xml' format. Note: means multiple sequences can name process id multiple sequences. Default: FALSE cleanData (logical) TRUE, cell values containing duplicated values (ex : \"COI-5P|COI-5P|COI-5P\") reduce one value (\"COI-5P\") empty string change NA. Default: FALSE ... args passed crul::verb-GET, main purpose curl debugging","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seqspec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get BOLD specimen + sequence data. — bold_seqspec","text":"Either data.frame, parsed xml, http response object, list length two (data: data.frame w/o nucleotide column, fasta: list nucleotides processid name)","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seqspec.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get BOLD specimen + sequence data. — bold_seqspec","text":"using taxon parameter another parameter, taxon found public database, act taxon specified try return data specified parameter. can make sure taxon looking public records bold_stats.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seqspec.html","id":"large-requests","dir":"Reference","previous_headings":"","what":"Large requests","title":"Get BOLD specimen + sequence data. — bold_seqspec","text":"requests can lead errors. often requesting data rank quite high tree, Order, example, Coleoptera. request taking long time, likely something go wrong BOLD server side, able parse result R R can process strings certain length. bold users reported errors resulting response BOLD large parse . good strategy want data high rank many separate requests lower ranks within target rank. can manually, use function taxize::downstream get names lower rank within target rank. example README (https://docs.ropensci.org/bold/#large-data)","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seqspec.html","id":"if-a-request-times-out","dir":"Reference","previous_headings":"","what":"If a request times out","title":"Get BOLD specimen + sequence data. — bold_seqspec","text":"likely request large number sequences BOLD service timed . still get output, sequences retrieved time happened. , see README (https://docs.ropensci.org/bold/#large-data) example dealing large data problems function.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seqspec.html","id":"marker","dir":"Reference","previous_headings":"","what":"Marker","title":"Get BOLD specimen + sequence data. — bold_seqspec","text":"Notes BOLD marker param: \"markers specimen matching search string returned. ie. record COI-5P return sequence data markers even COI-5P specified.\" likely end data markers request - just sure filter needed.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seqspec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get BOLD specimen + sequence data. — bold_seqspec","text":"http://v4.boldsystems.org/index.php/resources/api?type=webservices","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_seqspec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get BOLD specimen + sequence data. — bold_seqspec","text":"","code":"if (FALSE) { bold_seqspec(taxon='Osmia') bold_seqspec(taxon='Osmia', format='xml') bold_seqspec(taxon='Osmia', response=TRUE) res <- bold_seqspec(taxon='Osmia', sepfasta=TRUE) res$fasta[1:2] res$fasta['GBAH0293-06']  # records that match a marker name res <- bold_seqspec(taxon=\"Melanogrammus aeglefinus\", marker=\"COI-5P\")  # records that match a geographic locality res <- bold_seqspec(taxon=\"Melanogrammus aeglefinus\", geo=\"Canada\")  ## curl debugging ### You can do many things, including get verbose output on the curl call, ### and set a timeout head(bold_seqspec(taxon='Osmia', verbose = TRUE)) head(bold_seqspec(taxon='Osmia', timeout_ms = 1)) }"},{"path":"https://docs.ropensci.org/bold/reference/bold_specimens.html","id":null,"dir":"Reference","previous_headings":"","what":"Search BOLD for specimens. — bold_specimens","title":"Search BOLD for specimens. — bold_specimens","text":"Search BOLD specimens.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_specimens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search BOLD for specimens. — bold_specimens","text":"","code":"bold_specimens(   taxon = NULL,   ids = NULL,   bin = NULL,   container = NULL,   institutions = NULL,   researchers = NULL,   geo = NULL,   response = FALSE,   format = \"tsv\",   cleanData = FALSE,   ... )"},{"path":"https://docs.ropensci.org/bold/reference/bold_specimens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search BOLD for specimens. — bold_specimens","text":"taxon (character) One taxonomic name. Optional. ids (character|integer|numeric) One IDs. Optional. IDs include Sample IDs, Process IDs, Museum IDs Field IDs. bin (character) One Barcode Index Number URI. Optional. container (character) One project codes dataset codes. Optional. institutions (character) One institution's name. Optional. Institutions Specimen Storing Site. researchers (character) One researcher names. Optional. Include collectors specimen identifiers. geo (character) One geographic sites. Includes countries province/states. response (logical) Default : FALSE. TRUE, returns object Curl call. Useful debugging getting detailed info API call. format (character) One xml, json, tsv (default). tsv format gives back data.frame object. xml gives back parsed XML xml_document object. 'json' (JavaScript Object Notation) 'dwc' (Darwin Core Archive) supported theory, JSON can malformed, support , DWC option actually returns TSV. cleanData (logical) TRUE, cell values containing duplicated values (ex : \"COI-5P|COI-5P|COI-5P\") reduce one value (\"COI-5P\") empty string change NA. Default: FALSE ... args passed crul::verb-GET, main purpose curl debugging","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_specimens.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search BOLD for specimens. — bold_specimens","text":"using taxon parameter another parameter, taxon found public database, act taxon specified try return data specified parameter. can make sure taxon looking public records bold_stats.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_specimens.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search BOLD for specimens. — bold_specimens","text":"http://v4.boldsystems.org/index.php/resources/api?type=webservices","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_specimens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search BOLD for specimens. — bold_specimens","text":"","code":"if (FALSE) { bold_specimens(taxon='Osmia') bold_specimens(taxon='Osmia', format='xml') bold_specimens(taxon='Osmia', response=TRUE) res <- bold_specimens(taxon='Osmia', format='xml', response=TRUE) res$url res$status_code res$response_headers  # More than 1 can be given for all search parameters bold_specimens(taxon=c('Coelioxys','Osmia'))  ## curl debugging ### These examples below take a long time, so you can set a timeout so that ### it stops by X sec head(bold_specimens(taxon='Osmia', verbose = TRUE)) # head(bold_specimens(geo='Costa Rica', timeout_ms = 6)) }"},{"path":"https://docs.ropensci.org/bold/reference/bold_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get BOLD stats — bold_stats","title":"Get BOLD stats — bold_stats","text":"Get BOLD stats","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get BOLD stats — bold_stats","text":"","code":"bold_stats(   taxon = NULL,   ids = NULL,   bin = NULL,   container = NULL,   institutions = NULL,   researchers = NULL,   geo = NULL,   dataType = \"drill_down\",   response = FALSE,   simplify = FALSE,   ... )"},{"path":"https://docs.ropensci.org/bold/reference/bold_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get BOLD stats — bold_stats","text":"taxon (character) One taxonomic name. Optional. ids (character|integer|numeric) One IDs. Optional. IDs include Sample IDs, Process IDs, Museum IDs Field IDs. bin (character) One Barcode Index Number URI. Optional. container (character) One project codes dataset codes. Optional. institutions (character) One institution's name. Optional. Institutions Specimen Storing Site. researchers (character) One researcher names. Optional. Include collectors specimen identifiers. geo (character) One geographic sites. Includes countries province/states. dataType (character) one \"drill_down\"(default) \"overview\". \"drill_down\": detailed summary information provides record counts BINs, Countries, Storing Institutions, Orders, Families, Genus, Species. \"overview\": total record counts BINs, Countries, Storing Institutions, Orders, Families, Genus, Species. record counts include gene markers, COI. see drill markers use bold_tax_id2 \"stats\" dataTypes. response (logical) Default : FALSE. TRUE, returns object Curl call. Useful debugging getting detailed info API call. simplify (logical) whether returned list simplified data.frame. See Details. ... args passed crul::verb-GET, main purpose curl debugging","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get BOLD stats — bold_stats","text":"default, returns nested list number total records, number records species name, bins, countries, depositories, order, family, genus species, total count drill records 10 entities category. simplify set TRUE, returns list length 2 : overview data (number total records, number records species name, total counts) simplified data.frame 1 row 9 columns drill_down data simplified one level list data.frame. dataType set \"overview\", returns nested list number total records, number records species name, total count bins, countries, depositories, order, family, genus species. simplify set TRUE, returns data.frame 1 row 9 columns.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_stats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get BOLD stats — bold_stats","text":"http://v4.boldsystems.org/index.php/resources/api?type=webservices","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get BOLD stats — bold_stats","text":"","code":"if (FALSE) { x <- bold_stats(taxon='Osmia') x$total_records x$records_with_species_name x$bins x$countries x$depositories x$order x$family x$genus x$species  # just get all counts lapply(Filter(is.list, x), `[[`, \"count\")  bold_stats(taxon='Osmia', dataType = \"overview\", simplified = TRUE)  x <- bold_stats(taxon='Osmia', simplified = TRUE) x$overview x$drill_down  res <- bold_stats(taxon='Osmia', response=TRUE) res$url res$status_code res$response_headers  # More than 1 can be given for all search parameters  ## curl debugging ### These examples below take a long time, so you can set a timeout so that ### it stops by X sec bold_stats(taxon='Osmia', verbose = TRUE) # bold_stats(geo='Costa Rica', timeout_ms = 6) }"},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_id-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Search BOLD for taxonomy data by BOLD ID. — bold_tax_id-deprecated","title":"Search BOLD for taxonomy data by BOLD ID. — bold_tax_id-deprecated","text":"Search BOLD taxonomy data BOLD ID.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_id-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search BOLD for taxonomy data by BOLD ID. — bold_tax_id-deprecated","text":"id (integer) One BOLD taxonomic identifiers. required. dataTypes (character) Specifies datatypes returned. '' returns data. 'basic' returns basic taxon information. 'images' returns specimen images. includeTree (logical) TRUE (default: FALSE), returns list containing information parent taxa well specified taxon. response (logical) Default : FALSE. TRUE, returns object Curl call. Useful debugging getting detailed info API call. ... args passed crul::verb-GET, main purpose curl debugging","code":""},{"path":[]},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_id2.html","id":null,"dir":"Reference","previous_headings":"","what":"Search BOLD for taxonomy data by BOLD ID. — bold_tax_id2","title":"Search BOLD for taxonomy data by BOLD ID. — bold_tax_id2","text":"Search BOLD taxonomy data BOLD ID.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_id2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search BOLD for taxonomy data by BOLD ID. — bold_tax_id2","text":"","code":"bold_tax_id2(   id,   dataTypes = \"basic\",   includeTree = FALSE,   response = FALSE,   ... )"},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_id2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search BOLD for taxonomy data by BOLD ID. — bold_tax_id2","text":"id (integer|numeric|character) One BOLD taxonomic identifiers. required. dataTypes (character) One BOLD data types: 'basic', 'stats', 'geo', 'images'/'img', 'sequencinglabs'/'labs', 'depository'/'depo', 'thirdparty'/'wiki' '' (default: 'basic'). Specifies information returned, see details. includeTree (logical) TRUE (default: FALSE), returns information parent taxa well specified taxon, see details. response (logical) Default : FALSE. TRUE, returns object Curl call. Useful debugging getting detailed info API call. ... args passed crul::verb-GET, main purpose curl debugging","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_id2.html","id":"datatypes","dir":"Reference","previous_headings":"","what":"dataTypes","title":"Search BOLD for taxonomy data by BOLD ID. — bold_tax_id2","text":"\"basic\" returns basic taxonomy info: includes taxid, taxon name, tax rank, tax division, parent taxid, parent taxon name. \"stats\" returns specimen sequence statistics: includes public species count, public BIN count, public marker counts, public record count, specimen count, sequenced specimen count, barcode specimen count, species count, barcode species count. \"geo\" returns collection site information: includes country, collection site map. \"images\" returns specimen images: includes copyright information, image URL, image metadata. \"sequencinglabs\" returns sequencing labs: includes lab name, record count. \"depository\" returns specimen depositories: includes depository name, record count. \"thirdparty\" returns information third parties: includes wikipedia_summary summary, wikipedia_summary URL. \"\" returns information: identical specifying data types .","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_id2.html","id":"includetree","dir":"Reference","previous_headings":"","what":"includeTree","title":"Search BOLD for taxonomy data by BOLD ID. — bold_tax_id2","text":"includeTree set true, dataTypes 'basic' information parent taxa identified taxonomic id . get ranks names , make sure 'basic' dataTypes.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_id2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search BOLD for taxonomy data by BOLD ID. — bold_tax_id2","text":"http://v4.boldsystems.org/index.php/resources/api?type=taxonomy","code":""},{"path":[]},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_id2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search BOLD for taxonomy data by BOLD ID. — bold_tax_id2","text":"","code":"if (FALSE) { bold_tax_id2(id = 88899) bold_tax_id2(id = 88899, includeTree = TRUE) bold_tax_id2(id = 88899, includeTree = TRUE, dataTypes = \"stats\") bold_tax_id2(id = c(88899, 125295))  ## dataTypes parameter bold_tax_id2(id = 88899, dataTypes = \"basic\") bold_tax_id2(id = 88899, dataTypes = \"stats\") bold_tax_id2(id = 88899, dataTypes = \"images\") bold_tax_id2(id = 88899, dataTypes = \"geo\") bold_tax_id2(id = 88899, dataTypes = \"sequencinglabs\") bold_tax_id2(id = 88899, dataTypes = \"depository\") bold_tax_id2(id = 88899, dataTypes = \"thirdparty\") bold_tax_id2(id = 88899, dataTypes = \"all\") bold_tax_id2(id = c(88899, 125295), dataTypes = c(\"basic\", \"geo\")) bold_tax_id2(id = c(88899, 125295), dataTypes = c(\"basic\", \"stats\", \"images\"))  ## Passing in NA bold_tax_id2(id = NA) bold_tax_id2(id = c(88899, 125295, NA))  ## get http response object only bold_tax_id2(id = 88899, response = TRUE) bold_tax_id2(id = c(88899, 125295), response = TRUE)  ## curl debugging bold_tax_id2(id = 88899, verbose = TRUE) }"},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Search BOLD for taxonomy data by taxonomic name — bold_tax_name","title":"Search BOLD for taxonomy data by taxonomic name — bold_tax_name","text":"Search BOLD taxonomy data taxonomic name","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search BOLD for taxonomy data by taxonomic name — bold_tax_name","text":"","code":"bold_tax_name(   name,   fuzzy = FALSE,   response = FALSE,   tax_division = NULL,   tax_rank = NULL,   ... )"},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search BOLD for taxonomy data by taxonomic name — bold_tax_name","text":"name (character) One scientific names. required. fuzzy (logical) Whether use fuzzy search (default: FALSE) response (logical) Default : FALSE. TRUE, returns object Curl call. Useful debugging getting detailed info API call. tax_division (character) Taxonomic division filter results. tax_rank (character) Taxonomic rank filter results. ... args passed crul::verb-GET, main purpose curl debugging","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search BOLD for taxonomy data by taxonomic name — bold_tax_name","text":"dataTypes parameter supported function. want use parameter, get ID function pass bold_tax_id, use dataTypes parameter.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_name.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Search BOLD for taxonomy data by taxonomic name — bold_tax_name","text":"column 'specimenrecords' returned object represents number species records BOLD's Taxonomy Browser, number records Public Data Portal. know amount public records available, use bold_stats.","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_name.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search BOLD for taxonomy data by taxonomic name — bold_tax_name","text":"Taxonomy API: http://v4.boldsystems.org/index.php/resources/api?type=taxonomy Taxonomy Browser: https://www.boldsystems.org/index.php/TaxBrowser_Home Public Data Portal: https://www.boldsystems.org/index.php/Public_BINSearch?searchtype=records","code":""},{"path":[]},{"path":"https://docs.ropensci.org/bold/reference/bold_tax_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search BOLD for taxonomy data by taxonomic name — bold_tax_name","text":"","code":"if (FALSE) { bold_tax_name(name='Diplura') bold_tax_name(name='Osmia') bold_tax_name(name=c('Diplura','Osmia')) bold_tax_name(name=c(\"Apis\",\"Puma concolor\",\"Pinus concolor\")) bold_tax_name(name='Diplur', fuzzy=TRUE) bold_tax_name(name='Osm', fuzzy=TRUE)  ## get http response object only bold_tax_name(name='Diplura', response=TRUE) bold_tax_name(name=c('Diplura','Osmia'), response=TRUE)  ## Names with no data in BOLD database bold_tax_name(\"Nasiaeshna pentacantha\") bold_tax_name(name = \"Cordulegaster erronea\") bold_tax_name(name = \"Cordulegaster erronea\", response=TRUE)  ## curl debugging bold_tax_name(name='Diplura', verbose = TRUE) }"},{"path":"https://docs.ropensci.org/bold/reference/bold_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Get BOLD trace files — bold_trace","title":"Get BOLD trace files — bold_trace","text":"Get BOLD trace files","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get BOLD trace files — bold_trace","text":"","code":"bold_trace(   taxon = NULL,   ids = NULL,   bin = NULL,   container = NULL,   institutions = NULL,   researchers = NULL,   geo = NULL,   marker = NULL,   dest = NULL,   overwrite = TRUE,   progress = TRUE,   ... )  # S3 method for boldtrace print(x, ...)  read_trace(x)  bold_read_trace(x)"},{"path":"https://docs.ropensci.org/bold/reference/bold_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get BOLD trace files — bold_trace","text":"taxon (character) One taxonomic name. Optional. ids (character|integer|numeric) One IDs. Optional. IDs include Sample IDs, Process IDs, Museum IDs Field IDs. bin (character) One Barcode Index Number URI. Optional. container (character) One project codes dataset codes. Optional. institutions (character) One institution's name. Optional. Institutions Specimen Storing Site. researchers (character) One researcher names. Optional. Include collectors specimen identifiers. geo (character) One geographic sites. Includes countries province/states. marker (character) Returns records containing matching marker codes. dest (character) directory write files overwrite (logical) Overwrite existing directory file? progress (logical) Print progress . AVAILABLE NOW. HOPEFULLY RETURN SOON. ... args passed verb-GET x (list character) Either boldtrace object returned bold_trace path(s) bold trace file(s).","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_trace.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get BOLD trace files — bold_trace","text":"http://v4.boldsystems.org/index.php/resources/api?type=webservices","code":""},{"path":"https://docs.ropensci.org/bold/reference/bold_trace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get BOLD trace files — bold_trace","text":"","code":"if (FALSE) { # Use a specific destination directory bold_trace(taxon = \"Bombus ignitus\", geo = \"Japan\", dest = \"~/mytarfiles\")  # Another example # bold_trace(ids='ACRJP618-11', dest=\"~/mytarfiles\") # bold_trace(ids=c('ACRJP618-11','ACRJP619-11'), dest=\"~/mytarfiles\")  # read file in x <- bold_trace(ids=c('ACRJP618-11','ACRJP619-11'), dest=\"~/mytarfiles\") (res <- read_trace(x$ab1[2])) # read all files in (res <- read_trace(x))  # The progress dialog is pretty verbose, so quiet=TRUE is a nice touch, # but not by default # Beware, this one take a while # x <- bold_trace(taxon='Osmia', quiet=TRUE)  if (requireNamespace(\"sangerseqR\", quietly = TRUE)) {  library(\"sangerseqR\")  primarySeq(res)  secondarySeq(res)  head(traceMatrix(res)) } }"},{"path":"https://docs.ropensci.org/bold/reference/sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"List of 3 nucleotide sequences to use in examples for the\nbold_identify function — sequences","title":"List of 3 nucleotide sequences to use in examples for the\nbold_identify function — sequences","text":"List 3 nucleotide sequences use examples bold_identify function","code":""},{"path":"https://docs.ropensci.org/bold/reference/sequences.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of 3 nucleotide sequences to use in examples for the\nbold_identify function — sequences","text":"list length 3","code":""},{"path":"https://docs.ropensci.org/bold/reference/sequences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of 3 nucleotide sequences to use in examples for the\nbold_identify function — sequences","text":"sequence character string, lengths 410, 600, 696.","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-130","dir":"Changelog","previous_headings":"","what":"bold 1.3.0","title":"bold 1.3.0","text":"CRAN release: 2023-05-02","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"new-features-1-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"bold 1.3.0","text":"New function bold_identify_taxonomy() add taxonomic information output bold_identify() replace bold_identify_parents(). Instead taking taxon names bold_identify() output, use bold_tax_name() get taxonomic ID pass bold_tax_id() get parent names, take process ids bold_identify() output pass bold_specimens(). advantages faster , importantly, making sure correct taxonomy returned. function less arguments since filtering result isn’t necessary anymore. Since result now one line per row input, output always ‘wide’ format (like using bold_identify_parents() wide=TRUE). one new argument taxOnly TRUE default return taxonomic data. However, since bold_specimens() also returns data (habitat, country, image_url, etc), setting argument FALSE also join data input. New function bold_tax_id2() eventually replace bold_tax_id(). main changes format output. dataTypes ‘basic’, ‘stats’, ‘images’ ‘thirdparty’, output doesn’t change. dataTypes ‘sequencinglabs’, ‘geo’ ‘depository’, instead one (sometimes ) wide data.frame, result now ‘long’ format, columns ‘input’, ‘taxid’, ‘sequencinglabs|country|depository’ ‘count’. dataTypes ‘’ selecting one dataTypes, output list data types containing respective data.frame. setting includeTree TRUE, parents’ data rbinded respective data.frame. function also check arguments correct type dataTypes chosen valid. now deprecated bold_tax_id() argument checks bold_tax_id2() throw warnings instead errors affect existing workflows. Also, chosen dataTypes invalid, gets removed make unnecessary requests. Similarly, now deprecated bold_identify_parents() new argument checks throw warnings affect existing workflows. bold_tax_id2() bold_tax_name(), querying multiple taxa, one fails, loop won’t break instead throw API error warning. output object also 2 new attributes “errors” “params” let see errors occurred request parameters use request. make easy retrieve attributes, 3 new functions created: bold_get_attr() return list two attributes bold_get_errors() return list errors bold_get_params() return list parameters used bold_specimens() bold_seqspec() new parameter cleanData , set TRUE, replaces empty strings (““) NAs strings containing duplicated values unique value (ex :”COI-5P|COI-5P|COI-5P” becomes “COI-5P”). New function bold_read_trace() replace read_trace(). Can read one multiple trace files boldtrace object provided file path(s). New function b_sepFasta() use call bold_seqspec() sepFasta wasn’t set TRUE.","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-1-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 1.3.0","text":"made tests new functions made tests bold_trace() function added test existing functions improved test coverage added/completed argument checks every functions bold_specimens() bold_seqspec() can now also return partial output like bold_seq() using data.table possible, removed dplyr reshape dependencies using stringi instead stringr removed stringr’s dependencies added details documentation functions","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bug-fixes-1-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"bold 1.3.0","text":"changed http responses read throw warnings return NAs instead errors. prevents long request stop fail, loosing already fetched data. (#74) added note documentation bold_seq(), bold_seqspec() bold_specimen() taxon doesn’t public records, using another parameter return data parameter. Users can verify availability public records bold_stats(). note also added bold_tax_name() column ‘specimenrecords’ relate records taxonomy browser public data portal. (#76) fixed output bold_seq() (#79) changed function used encode UTF-8 (#81, #86) contacted bold fix typo ‘depository’ prevented fetching related data bold_tax_id() (#83). Added line function change ‘depositories’ ‘depository’ case people using . added check ‘name’ bold_tax_name() double escape single quotes. Otherwise doesn’t return data (#84, #85). Since ’s related API, means data comes back also contains errors. added function repair names ‘taxon’, ‘taxonrep’ ‘parentname’ returned object. function also used pipe_params() (used bold_seq(), bold_seqspec() bold_specimen()) repair taxon parameter case users use results previous versions. changed way response bold_seqspec() read (#87, #88) thanks @cjfields added note bold_stats() documentation specify record counts include gene markers (#90).","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-120","dir":"Changelog","previous_headings":"","what":"bold 1.2.0","title":"bold 1.2.0","text":"CRAN release: 2021-05-11","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-1-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 1.2.0","text":"vignettes fix (#77)","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-110","dir":"Changelog","previous_headings":"","what":"bold 1.1.0","title":"bold 1.1.0","text":"CRAN release: 2020-06-17","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 1.1.0","text":"fix failing test (#73)","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-100","dir":"Changelog","previous_headings":"","what":"bold 1.0.0","title":"bold 1.0.0","text":"CRAN release: 2020-05-01","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 1.0.0","text":"change base url requests https http (#70) fixed warning arising use bold_seqspec() - now set encoding “UTF-8” parsing string XML (#71) bold_seqspec() fix: capture “Fatal errors” returned BOLD servers pass along user advice (#66) add “Marker” “Large requests” documentation sections bold_seq() bold_seqspec(). marker section details marker parameter doesn’t actually filter results get - can filter . large requests section gives caveats associated large data requests outlines sort (#61)","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-090","dir":"Changelog","previous_headings":"","what":"bold 0.9.0","title":"bold 0.9.0","text":"CRAN release: 2019-06-27","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-0-9-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 0.9.0","text":"improved test coverage (#58) allow curl options passed bold_identify_parents() (#64) fix instructions README package sangerseqR - instructions depend version R used (#65) thanks @KevCaz","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"bold 0.9.0","text":"fixes package _R_CHECK_LENGTH_1_LOGIC2_ (#57) bold_identify() fix: ampersands needed escaped (#62) thanks @devonorourke","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-086","dir":"Changelog","previous_headings":"","what":"bold 0.8.6","title":"bold 0.8.6","text":"CRAN release: 2018-12-14","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-0-8-6","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 0.8.6","text":"tests make HTTP requests now use package vcr cache responses, speeds tests significantly, longer relies internet connection (#55) (#56) bold_seq(): sometimes large requests, BOLD servers time , give back partial output don’t indicate error. catch kind error now, throw message user, function gives back partial output given server. Also added documentation bold_seq() README run problem try many queries result smaller set results instead one fewer larger queries (#52) (#53) bold_seq(): remove return characters (\\r \\n) sequences (#54)","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-080","dir":"Changelog","previous_headings":"","what":"bold 0.8.0","title":"bold 0.8.0","text":"CRAN release: 2018-10-26","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-0-8-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 0.8.0","text":"link taxize bookdown book readme vignette (#51) bold_identify_parents() gains many new parameters (taxid, taxon, tax_rank, tax_division, parentid, parentname, taxonrep, specimenrecords) filter parents based number fields - solve problem multiple parents found single taxon, often different kingdoms (#50) add note docs bold_identify() function uses lapply internally, queries lots sequences can take long time","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"bold 0.8.0","text":"fix bold_specimens(): use rawToChar() raw bytes instead parse() crul (#47)","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-050","dir":"Changelog","previous_headings":"","what":"bold 0.5.0","title":"bold 0.5.0","text":"CRAN release: 2017-07-21","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"bold 0.5.0","text":"Now using BOLD’s v4 API throughout package. essentially just change BASE URL request (#30) Now using crul HTTP requests. really affects users specifying curl options works slightly differenlty (#42)","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"bold 0.5.0","text":"marker parameter bold_seqspec maybe still working, sense using parameter doesn’t always limit results marker specify. really fixed - watch , filter get results back get markers want. (#25) Fixed bug bold_identify_parents - failing match parent name. (#41) thx @VascoElbrecht tsv results erroring bold_specimens fxns (#46) - fixed switching new BOLD v4 API (#30)","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 0.5.0","text":"Namespace calls base pkgs stats utils - replaced inherits (#39)","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-040","dir":"Changelog","previous_headings":"","what":"bold 0.4.0","title":"bold 0.4.0","text":"CRAN release: 2017-01-06","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"bold 0.4.0","text":"New function bold_identify_parents() add taxonomic information output bold_identify(). take taxon names bold_identify output, use bold_tax_name get taxonomic ID, passing bold_tax_id get parent names, attaches input data. two options given put wide parameter. TRUE get data.frames dimensions parent rank name ID new columns (name going hierarchy) - FALSE get long data.frame. thanks @dougwyu inspiring (#36)","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 0.4.0","text":"replace xml2::xml_find_one xml2::xml_find_first (#33) Fix description db options bold_identify man file - COX1 COX1_SPECIES switched (#37) thanks pointing @dougwyu","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"bold 0.4.0","text":"Fix bold_tax_id elements returned BOLD API empty/NULL (#32) thanks @fmichonneau !!","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-035","dir":"Changelog","previous_headings":"","what":"bold 0.3.5","title":"bold 0.3.5","text":"CRAN release: 2016-03-29","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-0-3-5","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 0.3.5","text":"Added tests test suite (#28)","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bug-fixes-0-3-5","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"bold 0.3.5","text":"Fixed bug internal data parser (#27)","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-034","dir":"Changelog","previous_headings":"","what":"bold 0.3.4","title":"bold 0.3.4","text":"CRAN release: 2016-03-23","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"new-features-0-3-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"bold 0.3.4","text":"Added code conduct","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-0-3-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 0.3.4","text":"Switched xml2 XML XML parser package (#26) Fixes bold_trace() create dir tar file doesn’t already exist","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bug-fixes-0-3-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"bold 0.3.4","text":"Fixed odd problem sometimes resulting data HTTP request garbled content(x, \"text\"), now using rawToChar(content(x)), works (#24)","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-030","dir":"Changelog","previous_headings":"","what":"bold 0.3.0","title":"bold 0.3.0","text":"CRAN release: 2015-09-16","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 0.3.0","text":"Explicitly import non-base R functions (#22) Better package level manual file","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-026","dir":"Changelog","previous_headings":"","what":"bold 0.2.6","title":"bold 0.2.6","text":"CRAN release: 2015-04-18","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-0-2-6","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 0.2.6","text":"sangerseqR package now Suggests reading trace files, used bold_trace() function. General code tidying, reduction code duplication. bold_trace() gains two new parameters: overwrite choose whether overwrite existing file name , progress show progress bar downloading . bold_trace() gains print method show tidy summary trace file downloaded.","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bug-fixes-0-2-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"bold 0.2.6","text":"Fixed similar bugs bold_tax_name() (#17) bold_tax_id() (#18) species missing BOLD database returned empty arrays 200 status codes. Parsing failed attempts now. Also fixes problem taxize bold_search() use two functions.","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-020","dir":"Changelog","previous_headings":"","what":"bold 0.2.0","title":"bold 0.2.0","text":"CRAN release: 2014-08-20","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"bold 0.2.0","text":"Package gains two new functions working BOLD taxonomy APIs: bold_tax_name() bold_tax_id(), search taxonomic data BOLD using either names BOLD identifiers, respectively. (#11) Two new packages Imports: jsonlite reshape.","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 0.2.0","text":"Added new taxonomy API functions vignette (#14) Added reference URLS function doc files allow easy reference appropriate API docs. callopts parameter changed ... throughout package, passing options httr::GET done via named parameters, e.g., config=verbose(). (#13) Added examples curl debugging throughout man pages.","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-012","dir":"Changelog","previous_headings":"","what":"bold 0.1.2","title":"bold 0.1.2","text":"CRAN release: 2014-07-24","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"minor-improvements-0-1-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"bold 0.1.2","text":"Improved vignette (#8) Added small function print helpful message user inputs parameters zero length parameter values.","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"bold 0.1.2","text":"Fixed broken tests new httr (v0.4) (#9), added tests (#7)","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"bold-010","dir":"Changelog","previous_headings":"","what":"bold 0.1.0","title":"bold 0.1.0","text":"CRAN release: 2014-05-29","code":""},{"path":"https://docs.ropensci.org/bold/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"bold 0.1.0","text":"released CRAN","code":""}]
